<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">llazarek: Posts tagged 'testing'</title>
 <link rel="self" href="https://llazarek.github.io/feeds/testing.atom.xml" />
 <link href="https://llazarek.github.io/tags/testing.html" />
 <id>urn:https-llazarek-github-io:-tags-testing-html</id>
 <updated>2018-12-20T02:52:06Z</updated>
 <entry>
  <title type="text">Experimenting with testing syntax and composition</title>
  <link rel="alternate" href="https://llazarek.github.io/2018/12/experimenting-with-testing-syntax-and-composition.html?utm_source=testing&amp;utm_medium=Atom" />
  <id>urn:https-llazarek-github-io:-2018-12-experimenting-with-testing-syntax-and-composition-html</id>
  <published>2018-12-20T02:52:06Z</published>
  <updated>2018-12-20T02:52:06Z</updated>
  <author>
   <name>Lukas Lazarek</name></author>
  <content type="html">
&lt;p&gt;&lt;a href="https://docs.racket-lang.org/rackunit/index.html?q%3Drackunit"&gt;Rackunit&lt;/a&gt; is Racket&amp;rsquo;s unit testing library, and it has a pretty cool set of features. It aims to support testing at every stage of development, from simple inline checks to large, programmatically manipulated test suites. Unfortunately, despite the many features rackunit provides to support this goal, I have many-a-time found myself struggling against rackunit&amp;rsquo;s model for defining new checks. Last weekend, I finally got around to writing a testing library that provides a simpler interface to write flexible, composable test predicates and macros.&lt;/p&gt;&lt;a href="https://llazarek.github.io/2018/12/experimenting-with-testing-syntax-and-composition.html?utm_source=testing&amp;amp;utm_medium=Atom"&gt;&lt;em&gt;More&amp;hellip;&lt;/em&gt;&lt;/a&gt;</content></entry></feed>