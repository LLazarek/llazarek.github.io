((3) 0 () 14 ((p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-11-03-org-export-processing.md" . unix) (p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-07-27-rt18-ny.md" . unix) (p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-07-26-rt18-ma-ny.md" . unix) (p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-10-14-org-images.md" . unix) (p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-07-23-rt18-departure.md" . unix) (p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-07-20-ledger-monefy.md" . unix) (p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-07-29-rt18-end.md" . unix) (p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-08-15-scripting-emacs.md" . unix) (p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-07-09-better-agenda.md" . unix) (p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-07-09-modal-editing-emacs.md" . unix) (p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-07-02-org-mode.md" . unix) (p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-09-06-improving-agenda-2.md" . unix) (p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-08-12-home-nextcloud.md" . unix) (p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-05-22-ptext.scrbl" . unix)) () (h ! (equal) ((p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-07-26-rt18-ma-ny.md" . unix) f post (u . "Road Trip 2018: Leaving MA, entering NY") (? . 2) 1532731142 (p+ #"/home/lukas/github_sync/projects/website/2018/07/road-trip-2018-leaving-ma-entering-ny.html" . unix) (u . "/2018/07/road-trip-2018-leaving-ma-entering-ny.html") (u . "2018-07-26T12:08:00") (? . 4) (? . 1) (c (u . "rt18") c (u . "travel")) (u . "\n<p>Finally getting on the road.</p>") #t (u . "\n<p>Finally getting on the road.</p>\n<!-- more-->\n\n<br />\n\n<br />\n\n<h1 id=\"leaving-mass\">Leaving Mass</h1>\n\n<p>After working on last-minute repairs and cleanup until 3am, we woke up at 5am to get our state inspection &#8211; the final hurdle preventing us from departure. Before we could leave, however, we noticed that the awning on the side of the RV was falling off. This was pretty concerning, since the awning consisted of two large metal poles and a heavy metal center around which the tarp wraps. It was too far gone to repair with any level of confidence, so we decided to tear it off. Andrew pulled out the pickaxe and utility knife and we set to work extending the awning and cutting it from the roof. It took an hour and a half or so but we got it off and felt much better about the safety of our home.</p>\n\n<p>We drove to Peabody for the state inspection but were rejected because one of our brake lights were out on both sides. We sat in the parking lot of the shop thinking what might have broken, and after an hour or so of fiddling we fixed the lights by taking them out and flipping them around. Thus we became road legal.</p>\n\n<p>Our final stop in Mass was a locksmith in Salem who copied the RV keys and made us new keys to access the water pump and inlet. With that, we were set to go at around 4pm.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"new-york\">New York</h1>\n\n<p>We drove for six hours or so to the Spruce Creek Campground in Dolgeville NY. The owners were kind enough to let us check in nearly two hours after the normal closing time. We hooked up the power, turned on the AC, took showers, and went to sleep, exhausted.</p>\n\n<p>We woke up today at 8 feeling much better. A nearby diner supplied breakfast and gas, and then we went to George&rsquo;s Lumber for propane. We enjoyed a friendly conversation about our trip and national politics, and now we&rsquo;re on our way to Niagra. After that, the plan is to drive just past the border of Ohio. We&rsquo;re making good time!</p>\n\n<p>Leaving for Niagra:  <img src=\"/img/07.26-inside.jpg\" alt=\"img\" /></p>\n\n<br />\n\n<br />\n\n<h1 id=\"expenses-days-2--3\">Expenses (Days 2 &amp; 3)</h1>\n\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\"> \n <colgroup>\n  <col class=\"left\" /> \n  <col class=\"right\" /></colgroup> \n <thead>\n  <tr>\n   <th scope=\"col\" class=\"left\">Item</th> \n   <th scope=\"col\" class=\"right\">Amount ($)</th></tr></thead> \n <tbody>\n  <tr>\n   <td class=\"left\">RV Maintenance</td> \n   <td class=\"right\">&#160;</td></tr> \n  <tr>\n   <td class=\"left\">- MA Inspection</td> \n   <td class=\"right\">35</td></tr> \n  <tr>\n   <td class=\"left\">- Locksmith</td> \n   <td class=\"right\">26.25</td></tr> \n  <tr>\n   <td class=\"left\">- Propane refill</td> \n   <td class=\"right\">38.89</td></tr> \n  <tr>\n   <td class=\"left\">- Spare gas can</td> \n   <td class=\"right\">20</td></tr> \n  <tr>\n   <td class=\"left\">Tolls</td> \n   <td class=\"right\">10.60</td></tr> \n  <tr>\n   <td class=\"left\">Food</td> \n   <td class=\"right\">&#160;</td></tr> \n  <tr>\n   <td class=\"left\">- Lunch (pizza)</td> \n   <td class=\"right\">17.22</td></tr> \n  <tr>\n   <td class=\"left\">- Dinner (rest stop, ~$10/person)        </td> \n   <td class=\"right\">70</td></tr> \n  <tr>\n   <td class=\"left\">- Breakfast (diner)</td> \n   <td class=\"right\">52</td></tr> \n  <tr>\n   <td class=\"left\">Accommodation</td> \n   <td class=\"right\">&#160;</td></tr> \n  <tr>\n   <td class=\"left\">- Spruce Creek campground</td> \n   <td class=\"right\">51</td></tr></tbody> \n <tbody>\n  <tr>\n   <td class=\"left\">Total</td> \n   <td class=\"right\">320.96</td></tr></tbody></table>")) ((? . 0) f post (u . "Org Export Processing") (? . 0) 1545092731 (p+ #"/home/lukas/github_sync/projects/website/2018/11/org-export-processing.html" . unix) (u . "/2018/11/org-export-processing.html") (u . "2018-11-03T20:33:06") (? . 3) #f (c (u . "emacs") c (u . "org")) (u . "\n<p>Org&rsquo;s <a href=\"https://orgmode.org/manual/Exporting.html\">export system</a> is a fantastic tool for writing various documents quickly and easily within org mode. The only thing it lacks is simple tools for user-defined content generation during export. It&rsquo;s pretty easy to implement, though.</p>") #t (u . "\n<p>Org&rsquo;s <a href=\"https://orgmode.org/manual/Exporting.html\">export system</a> is a fantastic tool for writing various documents quickly and easily within org mode. The only thing it lacks is simple tools for user-defined content generation during export. It&rsquo;s pretty easy to implement, though.</p>\n<!-- more-->\n\n<p>I use org mode to write pretty much every document that I produce (papers, slideshows, reports, webpages; you name it). One of the most useful elements of the export system to me &#8211; besides the familiarity of using org all the time, of course &#8211; is that it allows me to hook into the export process to easily define custom transformations.</p>\n\n<p>I found myself doing this so often that I wrote a little package to make it easier to define the typical transformations inside my org documents. It&rsquo;s really simple: it just adds a hook to <code>org-export-before-processing-hook</code> (which is run inside a temporary buffer with the file contents just before export processing begins). That hook scans the file for lines beginning with <code>#+ll-org-process:</code> and eval&rsquo;s the elisp on those lines. The package also provides two functions that I use most often in those lines: one to replace regexps in the document, and one to run inline code in the document to generate content.</p>\n\n<p>Additionally, the package also removes trees tagged with <code>:noexport:</code> from the exported document, and removes the title text of headings tagged <code>:notitle:</code>. I use these tags in exported documents almost constantly, so I have these transformations always-on.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"example\">Example</h1>\n\n<p>One of the typical things I use this for is to add uniform structural content to exported documents. For example, in some contexts I don&rsquo;t like the spacing between headings in exported HTML documents. To fix that, I just add a regexp replacement to insert some whitespace before all headings of the appropriate level.</p>\n\n<pre><code>#+ll-org-process: (ll/org-process/replace \"^\\\\* \" \"&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;\\n* \")</code></pre>\n\n<p>This approach provides a couple of advantages over, say, doing this replacement directly in the org source:</p>\n\n<ol>\n <li>The org document doesn&rsquo;t get cluttered by otherwise irrelevant formatting information</li>\n <li>There is a single point of control if I later decide to adjust the formatting rules</li>\n <li>I can&rsquo;t forget to add these formatting elements if I add more headings</li></ol>\n\n<p>In longer documents with repetitive structure, I have also used this to create a kind a domain-specific language tailored to the document I&rsquo;m writing. I last used this when writing an assignment involving lots of proofs, in which I wrote functions to format the proof elements and provide a single point of control for the appearance of many terms. Indeed, using these tools allowed me to build up my proofs through a composition of formatting functions that felt very natural as a programmer, and made the document far more concise and less error prone than writing everything out manually.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"code\">Code</h1>\n\n<p>The package is small enough that I&rsquo;ll just put the source here. I put it in a file <code>ll-org-process.el</code> and <code>use-package</code> it from my init file. Note that, of course, this evaluates arbitrary code in the buffers that you export. That is its central feature. I have chosen (what I think to be) reasonable identifiers to ensure that nothing unwanted or unexpected is evaluated, and I have never had any issues, but it is certainly something to be aware of.</p>\n\n<pre><code>(defun ll/org-process/current-line-is-cmd ()\n  (string-prefix-p \"#+ll-org-process: \"\n                   (buffer-substring-no-properties (line-beginning-position)\n                                                   (line-end-position))))\n\n(defun ll/org-process/replace (old new &amp;optional fixedcase)\n  \"Replace all occurrences of regexp OLD with NEW. Supports\nreplacement with matched groups using group references; see\n`replace-match' for more information.\n\nNote: Since regexps in Emacs undergo several levels of\nprocessing, if a regex needs to contain a '\\\\' as part of a\nregexp, then you need to have '\\\\\\\\'. For a literal '\\\\' in the\nregexp, you need '\\\\\\\\\\\\\\\\'. This goes for both OLD and NEW.\"\n  (beginning-of-buffer)\n  (while (re-search-forward old (buffer-end 1) t)\n    (unless (ll/org-process/current-line-is-cmd)\n      (replace-match new fixedcase))))\n\n(defun ll/org-process/eval-at-exps (&amp;optional at-exp-delim)\n  \"Execute all at-expressions in the current buffer, replacing\nthe expression with its result formatted as a string. An\nat-expression is any elisp expression beginning with the provided\ndelimiter string (~@ by default). E.g. ~@(+ 1 2), ~@c-version\n\"\n  (let* ((delim (or at-exp-delim \"~@\"))\n         (delim-len (length delim)))\n    (save-excursion\n      (beginning-of-buffer)\n      (while (search-forward delim (buffer-end 1) t)\n        (let ((invocation (read (current-buffer))))\n          (backward-kill-sexp)\n          (save-excursion\n            (backward-char delim-len)\n            (when (looking-at-p delim)\n              (delete-char delim-len)))\n          (insert (format \"%s\"\n                          (eval invocation))))))))\n\n(defun ll/org-process/preprocess-buffer (backend)\n  \"Execute all \\\"#+ll-org-process: \\\" lines in the current buffer.\nProcess commands may be arbitrary elisp expressions. For\nconvenience, the following special functions provide\ncommonly-used behavior (which see):\n- `ll/org-process/replace'\n- `ll/org-process/eval-at-exps'\n\"\n  (save-excursion\n    (beginning-of-buffer)\n    (while (search-forward \"#+ll-org-process: \" (buffer-end 1) t)\n      (when (current-line-is-cmd)\n        (save-excursion\n          (eval-region (point) (line-end-position)))\n        (kill-whole-line)))))\n\n(add-hook 'org-export-before-processing-hook #'ll/org-process/preprocess-buffer)\n\n\n(defun ll/org-process/remove-headlines (backend)\n  \"Remove headings with the :noexport: tag, and delete the titles\nof headings with the :notitle: tag.\"\n  (org-map-entries (lambda () (let ((beg (point)))\n                                (outline-next-visible-heading 1)\n                                (backward-char)\n                                (delete-region beg (point))))\n                   \"noexport\" tree)\n  (org-map-entries (lambda () (delete-region (point-at-bol) (point-at-eol)))\n                   \"notitle\"))\n\n(add-hook 'org-export-before-processing-hook #'ll/org-process/remove-headlines)\n\n(provide 'll-org-process)</code></pre>")) ((p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-07-27-rt18-ny.md" . unix) f post (u . "Road Trip 2018: Niagara, Leaving New York") (? . 1) 1532731153 (p+ #"/home/lukas/github_sync/projects/website/2018/07/road-trip-2018-niagara-leaving-new-york.html" . unix) (u . "/2018/07/road-trip-2018-niagara-leaving-new-york.html") (u . "2018-07-27T16:54:48") (? . 2) (? . 6) (c (u . "rt18") c (u . "travel")) (u . "\n<p>Seeing Niagara before heading out of NY.</p>") #t (u . "\n<p>Seeing Niagara before heading out of NY.</p>\n<!-- more-->\n\n<br />\n\n<br />\n\n<h1 id=\"disaster-strikes\">Disaster Strikes</h1>\n\n<p>It was about 11pm and raining hard when we pulled up to the toll booth, scrambling to gather sufficient cash. Andrew stepped out to hand the woman the money and she said that our tail lights were out. That&rsquo;s no good, but it was ok since we were planning to spend the night at a rest stop less than a mile after the toll, just inside Pennsylvania. No problem.</p>\n\n<p>It became a problem after we pulled passed the last semi-truck parked in the rest stop. We sat behind another semi-truck parked on the edge of the entrance ramp to the highway, wondering what to do. Clearly we couldn&rsquo;t keep driving in the dark and rain without tail lights. But the nearest campground or Walmart with overnight parking seemed to be at least 15 miles away.</p>\n\n<p>The rain splashing on the roof accentuated the silence as we all sat staring at our phones, searching and thinking what we could do. After fifteen or twenty minutes we discover (on Google maps) a truck stop just off the next exit. It probably had a place to park safely overnight. We decide to carefully drive the three miles to the exit with our hazards on so that cars behind can see us.</p>\n\n<p>After a minute, the distinct odor of burning plastic fills the RV and Andrew notices that the hazards aren&rsquo;t flashing properly. They seemed to be getting stuck periodically. The burning smell got so bad that we had to turn off the hazards and hope that we would make it the rest of the way. It was only two miles or less.</p>\n\n<p>A minute later, a mile or so from the exit, there&rsquo;s a loud bang and Andrew starts exclaiming wildly. The hood had caught in the wind and flapped open. We looked behind us; we couldn&rsquo;t reasonably stop in the breakdown lane with no tail lights and no hazards.. This was not our lucky day, to say the least.</p>\n\n<p>The hood flipped back down just as we had slowed down to a crawl in the breakdown lane. A few seconds later we found our exit and found the truck stop with a large, well-lit parking lot just off the exit ramp. We found several open spaces and nestled in with the rest of the semi-trucks spending the night, exhausted. We fell asleep to the sounds of passing trucks on the overpass and trains on the tracks beside the parking lot.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"niagara\">Niagara</h1>\n\n<p>The day before, we had arrived at Niagara at about 6pm, two hours behind schedule. Nonetheless, there was still plenty of time for the boat tour. We took the Maiden of the Mist right up into the misty billows of the Niagara falls and walked along the American falls. Then we stopped for dinner at a Chinese food place, where we decided to drive on until about 11pm and spend the night at a rest stop just inside the Pennsylavia border.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"pennsylvania\">Pennsylvania</h1>\n\n<p>The next morning we woke up early to figure out what went wrong with our tail lights. After fiddling with the lights for three hours, we decide to drive to the next Walmart to get the parts we needed to fix the lights. There, we bought the parts we needed, a new battery, groceries, and some other useful bits to improve the RV like cupholders. We spent another five hours shopping, installing new extra tail lights, and setting up our home improvements.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"on-the-road-again\">On the road again</h1>\n\n<p>Now we&rsquo;re on the road again in Ohio. We have decided to skip the Hocking Hills state park we had planned to spend the day at today in order to stay on schedule for the more significant attractions farther down the road. We&rsquo;ll be stopping early at a campground to enjoy a grilled dinner and relax on Lake Erie.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"expenses-days-3--4\">Expenses (Days 3 &amp; 4)</h1>\n\n<p>The toll expense represents the cash we have taken out in preparation for tolls. While this doesn&rsquo;t give a clear picture of the specific cost of tolls per day, in aggregate it should provide a good idea of how much tolls cost driving cross country.</p>\n\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\"> \n <colgroup>\n  <col class=\"left\" /> \n  <col class=\"right\" /></colgroup> \n <thead>\n  <tr>\n   <th scope=\"col\" class=\"left\">Item</th> \n   <th scope=\"col\" class=\"right\">Amount ($)</th></tr></thead> \n <tbody>\n  <tr>\n   <td class=\"left\">RV Maintenance</td> \n   <td class=\"right\">&#160;</td></tr> \n  <tr>\n   <td class=\"left\">- New Battery</td> \n   <td class=\"right\">95</td></tr> \n  <tr>\n   <td class=\"left\">- Thermal Flasher Relay</td> \n   <td class=\"right\">16.95</td></tr> \n  <tr>\n   <td class=\"left\">- Tail lights and misc upgrades       </td> \n   <td class=\"right\">105</td></tr> \n  <tr>\n   <td class=\"left\">Tolls</td> \n   <td class=\"right\">100</td></tr> \n  <tr>\n   <td class=\"left\">Food</td> \n   <td class=\"right\">&#160;</td></tr> \n  <tr>\n   <td class=\"left\">- Dinner (Chinese)</td> \n   <td class=\"right\">86.50</td></tr> \n  <tr>\n   <td class=\"left\">- Breakfast (McDonalds)</td> \n   <td class=\"right\">7.96</td></tr> \n  <tr>\n   <td class=\"left\">- Groceries (Walmart)</td> \n   <td class=\"right\">100</td></tr> \n  <tr>\n   <td class=\"left\">Accommodation</td> \n   <td class=\"right\">&#160;</td></tr> \n  <tr>\n   <td class=\"left\">- Willow Lake Campground</td> \n   <td class=\"right\">57</td></tr> \n  <tr>\n   <td class=\"left\">Misc Supplies</td> \n   <td class=\"right\">50</td></tr> \n  <tr>\n   <td class=\"left\">Entertainment</td> \n   <td class=\"right\">&#160;</td></tr> \n  <tr>\n   <td class=\"left\">- Maid of the Mist boat tour</td> \n   <td class=\"right\">134.75</td></tr></tbody> \n <tbody>\n  <tr>\n   <td class=\"left\">Total</td> \n   <td class=\"right\">753.16</td></tr></tbody></table>\n\n<br />\n\n<br />\n\n<h1 id=\"pictures\">Pictures</h1>\n\n<p>Out of the mist <img src=\"/img/07.26-mistmaiden.jpg\" alt=\"img\" /></p>\n\n<p>Full falls view <img src=\"/img/07.26-niagra.jpg\" alt=\"img\" /></p>\n\n<p>Can you spot us? <img src=\"/img/07.26-truckstop.jpg\" alt=\"img\" /></p>")) ((p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-09-06-improving-agenda-2.md" . unix) f post (u . "Improving the Agenda (part 2: custom views)") (? . 11) 1536287392 (p+ #"/home/lukas/github_sync/projects/website/2018/09/improving-the-agenda-part-2-custom-views.html" . unix) (u . "/2018/09/improving-the-agenda-part-2-custom-views.html") (u . "2018-09-06T20:40:28") (? . 7) (? . 3) (c (u . "emacs") c (u . "org")) (u . "\n<p>This is the second post on configuring the agenda. Find the first post <a href=\"http://llazarek.github.io/2018/07/improving-the-agenda.html\">here</a>.</p>") #t (u . "\n<p>This is the second post on configuring the agenda. Find the first post <a href=\"http://llazarek.github.io/2018/07/improving-the-agenda.html\">here</a>.</p>\n<!-- more-->\n\n<br />\n\n<br />\n\n<h1 id=\"context\">Context</h1>\n\n<h2 id=\"the-default-agenda-is-limited\">The default agenda is limited</h2>\n\n<p>While org mode&rsquo;s default agenda layout is informative and can certainly be used effectively with minor tweaks (I used it as such quite effectively for a few years), it&rsquo;s not perfect. It can easily become cluttered and difficult to parse with too many tasks &#8211; precisely the circumstance in which it <em>should</em> make it easy to tell what needs to be done. Furthermore, since only time-stamped tasks show up in the default agenda, all the tasks I want to see must be dated. For many types of tasks this makes sense, as they must be performed on or by a certain date; however, a large class of tasks have no such clear date associated. For example, many low-priority tasks can be done any time, and long-term/ongoing tasks like projects without a definite deadline don&rsquo;t make sense to assign to arbitrary dates. These types make up a category of tasks about which I want to be reminded (or made aware of) in the agenda, without interfering with my ability to see and manage my more time-sensitive tasks.</p>\n\n<h2 id=\"representing-ongoing-tasks\">Representing ongoing tasks</h2>\n\n<p>In the default agenda, I would typically schedule such tasks on the first date at which I wanted to be reminded of the task, but this approach is generally unattractive. It usually results in my agenda view for any given day consisting (often in large part) of a list of long-overdue tasks which aren&rsquo;t actually overdue, but are just ongoing, low prioty, or time-insensitive. This meant that to read what I needed to do for the day I must first mentally identify and filter out that category of tasks in order to see the time-sensitive items that must be completed by today or in the near future. This clearly means that agenda is <em>under-performing in it&rsquo;s most basic function</em> &#8211; to make it easy, if not instantaneous, to see what needs to be done today.</p>\n\n<p>While I found ways to mitigate this issue with prioritization and emphasis (as described in the last post), that solution was never really satisfactory because the overdue tasks still cluttered my view of today&rsquo;s tasks.</p>\n\n<p>The ideal solution to this problem is to be able to partition the agenda into sections, showing first the time-sensitive tasks of the day, then the tasks I have marked as priority items, and finally a list of all ongoing/time-insensitive tasks.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"custom-agenda-commands\">Custom agenda commands</h1>\n\n<p>Unsurprisingly, org mode provides pretty simple tools to make that dream a reality. Custom agenda commands allow pretty arbitrary queries of tasks in the agenda files to be pieced together into <a href=\"https://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html\">composite agenda views</a>. In particular, <a href=\"https://orgmode.org/manual/Block-agenda.html#Block-agenda\">agenda blocks</a> allow the agenda to be partitioned into different sections featuring entirely independent queries.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"example\">Example</h1>\n\n<p>The syntax for defining custom agenda commands is not entirely straightforward, so I think it is best conveyed by example. The docs provide some information, and the <a href=\"https://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html\">worg page</a> is quite helpful. In general, I found it easiest to tweak and extend examples to obtain the desired configuration.</p>\n\n<h2 id=\"a-multi-part-agenda-view\">A multi-part agenda view</h2>\n\n<p>To create a partitioned agenda view, modify <code>org-agenda-custom-commands</code> like this. The agenda views will be available from the agenda dispatcher, <code>org-agenda</code>.</p>\n\n<pre><code>(setq org-agenda-custom-commands\n      '((\"h\" \"Agenda and Home-related tasks\"\n         (;; One block with a standard agenda view\n          (agenda \"\")\n          ;; one block of ALL tasks tagged :home:\n          (tags-todo \"home\")))\n        ...))</code></pre>\n\n<h2 id=\"filtering\">Filtering</h2>\n\n<p>Each block can have specialized filters for the items that should be included in the block.</p>\n\n<p>For example, with the above custom command any scheduled/deadline tasks tagged with <code>:home:</code> will be displayed twice. To fix this, we can filter out scheduled/deadline tasks from the second block:</p>\n\n<pre><code>(setq org-agenda-custom-commands\n      '((\"h\" \"Agenda and Home-related tasks\"\n         (;; One block with a standard agenda view\n          (agenda \"\")\n          ;; one block of ALL tasks tagged :home:\n          (tags-todo \"home\"\n                     (org-agenda-skip-function\n                      '(org-agenda-skip-if nil '(scheduled deadline))))))\n        (\"H\" \"Agenda and Home-related tasks**\"\n         (;; One block with a standard agenda view\n          (agenda \"\")\n          ;; one block of ALL tasks tagged :home:\n          (tags-todo \"home\"\n                     (org-agenda-skip-function\n                      '(or (org-agenda-skip-if nil '(scheduled deadline))\n                           (org-agenda-skip-if 'regexp \":work:\"))))))\n        ...))</code></pre>\n\n<p>The second custom view also shows how filters can be combined with <code>or</code> and <code>and</code> to create complex filters. The second block of that view now also filters out any items tagged with <code>:work:</code>.</p>\n\n<h2 id=\"a-three-part-agenda\">A three-part agenda</h2>\n\n<p>The agenda configuration I now use consists of three sections in the following order:</p>\n\n<ol>\n <li>\n  <p>Scheduled, overdue, and upcoming deadline time-sensitive tasks for the current day:</p>\n  <pre><code>(agenda \"plain\"\n        ((org-agenda-span 'day)))</code></pre></li>\n <li>\n  <p>Prioritized tasks for the current period (any tasks with the priority tag)</p>\n  <pre><code>(tags-todo \"my-priority-tag\"\n           ((org-agenda-span 'day) \n            (org-agenda-overriding-header\n             \"Priority tasks\")))</code></pre></li>\n <li>\n  <p>All other tasks, sorted by priority tag &#8211; specifically tasks <em>without</em> any timestamp</p>\n  <pre><code>(alltodo \"\"\n         ((org-agenda-skip-function\n           '(org-agenda-skip-if nil '(scheduled deadline)))\n          (org-agenda-overriding-header\n           \"Low priority tasks\")))</code></pre></li></ol>")) ((p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-07-23-rt18-departure.md" . unix) f post (u . "Road Trip 2018: Departure") (? . 4) 1532457349 (p+ #"/home/lukas/github_sync/projects/website/2018/07/road-trip-2018-departure.html" . unix) (u . "/2018/07/road-trip-2018-departure.html") (u . "2018-07-23T23:24:40") (? . 5) (? . 2) (c (u . "rt18") c (u . "travel")) (u . "\n<p>Getting ready to leave.</p>") #t (u . "\n<p>Getting ready to leave.</p>\n<!-- more-->\n\n<br />\n\n<br />\n\n<h1 id=\"the-plan\">The Plan</h1>\n\n<p>My friends and I are driving across America for \n <del>six</del> five weeks. Road trips play some sort of central role in American culture, and we wanted to have the experience and see our own country.</p>\n\n<p>We decided to buy an RV because we discovered how cheap they are. Browsing Craigslist and RVShare, we saw dozens of RVs for sale around $5&ndash;10k. Not only was this an affordable up-front cost for a six-week vacation, we reasoned that we can even recoup the cost if we can resell it after the trip.</p>\n\n<p>Our RV was found on Craigslist for just $5k. While a little beat up, its engine ran nicely and its fundamental systems seemed fully operational. However, the previous owner had it sitting in an empty lot and was generally unwilling to drive it around because it was unregistered and uninsured, so we took his word for some of the systems like the generator, AC, and water pump. This was probably a mistake.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"repairing-the-rv\">Repairing the RV</h1>\n\n<p>As we started the repairs we found that a number of these systems didn&rsquo;t work nearly as well as we might have hoped. The right hand mirror was mounted on such flimsy wood that it shook too much to be useful, the heating did not seem to work, the gas gauge was broken, and so on&#8230; While we resolved those relatively easily, the remaining large issue was that the generator failed to produce any power.</p>\n\n<p>Indeed, the generator has proven to be the single largest issue, despite seeming like a simple fix at the start; our struggle to fix it ultimately delayed the trip by over a week. Contrary to what we had been told when we bought the RV, the generator turned out to run on propane (not diesel), and few mechanics seem to work on propane RV generators. In fact, we couldn&rsquo;t find a single mechanic who would even look at the generator, though they only told us after keeping the RV in the shop for a several days.</p>\n\n<p>We&rsquo;re getting the RV back today and are going to leave as soon as we get it. Given that we are now a week late, we decided to try a few quick fixes for the generator and then depart regardless of whether they work. Being without a generator will mean no AC while on the road, but that&rsquo;s better than not being on the road at all.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"pre-departure-costs\">Pre-departure Costs</h1>\n\n<p>Repairing the RV cost significantly more money than we expected; we expected two or three thousand dollars of repairs but ended up with about five thousand.</p>\n\n<p>I&rsquo;ve itemized out costs below, identifying the major categories of the expenses. Minor expenses or pieces particular to the issues with our RV have been aggregated in &ldquo;Misc repairs&rdquo;.</p>\n\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\"> \n <colgroup>\n  <col class=\"left\" /> \n  <col class=\"right\" /></colgroup> \n <thead>\n  <tr>\n   <th scope=\"col\" class=\"left\">Item</th> \n   <th scope=\"col\" class=\"right\">Cost ($)</th></tr></thead> \n <tbody>\n  <tr>\n   <td class=\"left\">RV</td> \n   <td class=\"right\">5000</td></tr> \n  <tr>\n   <td class=\"left\">Repairs</td> \n   <td class=\"right\">&#160;</td></tr> \n  <tr>\n   <td class=\"left\">- New Tires</td> \n   <td class=\"right\">1896.55</td></tr> \n  <tr>\n   <td class=\"left\">- Fluid changes, tune-ups</td> \n   <td class=\"right\">474.14</td></tr> \n  <tr>\n   <td class=\"left\">- Misc repairs</td> \n   <td class=\"right\">1578.18</td></tr> \n  <tr>\n   <td class=\"left\">Misc Supplies</td> \n   <td class=\"right\">&#160;</td></tr> \n  <tr>\n   <td class=\"left\">- National parks pass</td> \n   <td class=\"right\">165</td></tr> \n  <tr>\n   <td class=\"left\">- Bike rack</td> \n   <td class=\"right\">105.19</td></tr> \n  <tr>\n   <td class=\"left\">- Insurance payments</td> \n   <td class=\"right\">502.40</td></tr> \n  <tr>\n   <td class=\"left\">- Mobile hotspot</td> \n   <td class=\"right\">80</td></tr></tbody> \n <tbody>\n  <tr>\n   <td class=\"left\">**Total** pre-departure costs         </td> \n   <td class=\"right\">9721.46</td></tr></tbody></table>")) ((p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-07-20-ledger-monefy.md" . unix) f post (u . "Tracking Expenses with Ledger") (? . 5) 1532129252 (p+ #"/home/lukas/github_sync/projects/website/2018/07/tracking-expenses-with-ledger.html" . unix) (u . "/2018/07/tracking-expenses-with-ledger.html") (u . "2018-07-20T13:34:47") (? . 8) (? . 4) (c (u . "ledger") c (u . "finance") c (u . "racket") c (u . "scribble")) (u . "\n<p>How I track expenses using ledger, even on my phone.</p>") #t (u . "\n<p>How I track expenses using ledger, even on my phone.</p>\n<!-- more-->\n\n<br />\n\n<br />\n\n<h1 id=\"ledger\">Ledger</h1>\n\n<p>I use <a href=\"https://www.ledger-cli.org/\">ledger</a> to track my personal finances. Ledger is a commandline tool for <a href=\"https://en.wikipedia.org/wiki/Double-entry_bookkeeping_system\">double-entry accounting</a>, and it&rsquo;s most salient feature is that all of my financial data is stored in plain text and ledger never automatically modifies it. This guarantees that my data will always be easily accessible (no software lock-in) and can&rsquo;t be corrupted by a bug, crash, etc.</p>\n\n<p>The ledger website has a pretty thorough guide to using the tool, so I won&rsquo;t explain in any detail here. The basic idea is to have entries for every financial transaction that look like this:</p>\n\n<pre><code>date * (Person or company the transaction is with)\n    ; (A note on what this transaction is)\n    (An account which is credited or debited)  (Amount to credit/debit)\n    (An account which is credited or debited)  (Amount to credit/debit)\n\n; Example:\n\n2018/07/17 * Ben's Noodles\n    ; Dinner\n    expenses:basics:food  25.0\n    liabilities:cards:visa  -25.0</code></pre>\n\n<p>Then, ledger can check my math and produce reports from the commandline, such as how much money I have left in my accounts, or how much I spent on food last month, or all of the transactions I made with Ben&rsquo;s Noodles since September of this year.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"tracking-expenses-when-not-at-the-computer\">Tracking expenses when not at the computer</h1>\n\n<p>While I greatly appreciate ledger&rsquo;s simplicity and compatibility with unix tools, one of my main quibbles with it early on was keeping track of expenses when I am not at the computer. Most of my expenses are incurred at times when I can&rsquo;t add them to my ledger file, so I needed a way to temporarily store entries and a mechanism to import them into my ledger file. The obvious solution was to use an expense-tracking app which supports data export.</p>\n\n<p>I use <a href=\"https://play.google.com/store/apps/details?id%3Dcom.monefy.app.lite&amp;hl%3Den_US\">Monefy</a>, and it suits my needs pretty well. It has all of the basic components of a ledger entry as described above, so it suffices for the simple transactions that make up the majority.</p>\n\n<p>Monefy provides a facility to export its transactions to csv, so I wrote a few functions to automatically convert the csv export to ledger entries. The main entry point, <code>ll/ledger/parse-myexpenses-csv</code>, prompts for a filepath and then inserts the ledger entries into the <code>*scratch*</code> buffer, where I can review them and then copy-pasta them into my ledger file.</p>\n\n<pre><code>(defun ll/parse-csv (buf &amp;optional sep)\n  \"ll/parse-csv: buffer [string] -&gt; (listof (listof string))\n\nParse the contents of BUF as csv into a list of lines, optionally\nproviding a seperator SEP.\"\n  (let ((result nil))\n    (with-current-buffer buf\n      (goto-char (point-min))\n      (while (not (eobp))\n        (let ((line (buffer-substring-no-properties\n                     (line-beginning-position) (line-end-position))))\n          (push (split-string line (or sep \",\")) result))\n        (forward-line 1)))\n    (reverse result)))\n\n(defun ll/ledger/insert-as-entry/myexpenses (csv-entry)\n  \"ll/ledger/insert-as-entry/myexpenses: (listof string) -&gt; void\n\nInsert (into the current buffer) a ledger entry corresponding to\n CSV-ENTRY (an entry as those returned by `ll/parse-csv').\"\n  (let ((date (second csv-entry))\n        (payee (third csv-entry))\n        (amount (string-to-number\n                 (if (string-equal (fourth csv-entry) \"0\")\n                     (fifth csv-entry)\n                   (concat \"-\" (fourth csv-entry)))))\n        (to-account (sixth csv-entry))\n        (from-account (ninth csv-entry))\n        (comment (eighth csv-entry)))\n    (insert date \" * \" payee \"\\n\"\n            \"    ; \" comment \"\\n\"\n            \"    \" to-account \"  \" (number-to-string amount) \"\\n\"\n            \"    \" from-account \"  \" (number-to-string (- amount)) \"\\n\\n\\n\")))\n\n\n(defun ll/ledger/parse-myexpenses-csv (&amp;optional filepath)\n  \"Parse the My Expenses csv file at FILEPATH and append its contents to\n the *scratch* buffer as ledger entries.\"\n  (interactive)\n  (let* ((filepath (or filepath\n                       (helm-read-file-name \"My Expenses csv file: \")))\n         (buffer (find-file-noselect filepath)))\n    (with-current-buffer buffer\n      (replace-string \"\\\"\" \"\"))\n    (switch-to-buffer \"*scratch*\")\n    (end-of-buffer)\n    (mapc (function ll/ledger/insert-as-entry/myexpenses)\n          (cdr (ll/parse-csv buffer \";\")))\n    (kill-buffer buffer)))</code></pre>\n\n<br />\n\n<br />\n\n<h1 id=\"recurring-ledger-entries\">Recurring ledger entries</h1>\n\n<p>The other main hitch that I have encountered with ledger is that it provides no builtin mechanism for repeating transactions. For example, I need to pay rent for the same amount on the same day every month. I don&rsquo;t want to manually insert this identical transaction every month, and an automated approach ensures I can&rsquo;t forget to do it.</p>\n\n<p>Fortunately, this is where ledger&rsquo;s data being stored in plaintext becomes a great advantage. Any number of tools can be employed to augment ledger&rsquo;s features to fix issues like this. For this particular issue, I use a text preprocessor - specifically, <a href=\"https://docs.racket-lang.org/scribble-pp/index.html\">scribble</a> - to programmatically generate the recurring ledger entries. Since I use scribble, I implement the recurring ledger entries as a few simple racket functions that return the text to be inserted. Then I invoke the functions within my ledger file. This involves executing my ledger file as a step before running ledger for reports and queries, but it works pretty well (I just have a wrapper script that takes care of this whenever I run ledger).</p>\n\n<p>Using these definitions (I put it in a module called <code>ledger-repeat.rkt</code>):</p>\n\n<pre><code>#lang racket/base\n\n(require racket/date racket/string)\n\n(define (!= a b)\n  (not (= a b)))\n\n;; ldate is just a simpler struct for representing dates than\n;; racket/date's\n(define-struct ldate (year month day) #:prefab)\n\n(define (ltoday)\n  (let ([date-today (seconds-&gt;date (current-seconds))])\n    (make-ldate (date-year date-today)\n                (date-month date-today)\n                (date-day date-today))))\n\n(define (ldate-&lt; d1 d2)\n  (cond [(!= (ldate-year d1) (ldate-year d2))\n         (&lt; (ldate-year d1) (ldate-year d2))]\n\n        [(!= (ldate-month d1) (ldate-month d2))\n         (&lt; (ldate-month d1) (ldate-month d2))]\n\n        [else\n         (&lt;  (ldate-day d1) (ldate-day d2))]))\n\n(define (next-month a-date)\n  (if (= (ldate-month a-date) 12)\n      (make-ldate (add1 (ldate-year a-date))\n                  1\n                  (ldate-day a-date))\n      (make-ldate (ldate-year a-date)\n                  (add1 (ldate-month a-date))\n                  (ldate-day a-date))))\n\n(define (next-year a-date)\n  (make-ldate (add1 (ldate-year a-date))\n              (ldate-month a-date)\n              (ldate-day a-date)))\n\n(define (number-&gt;datestr n)\n  (if (&lt; n 10)\n      (string-append \"0\" (number-&gt;string n))\n      (number-&gt;string n)))\n\n;; format str contains any of \"%y %m %d\"\n(define (format-date format-str a-date)\n  (string-replace\n   (string-replace\n    (string-replace format-str\n                    \"%y\"\n                    (number-&gt;string (ldate-year a-date)))\n    \"%m\"\n    (number-&gt;datestr (ldate-month a-date)))\n   \"%d\"\n   (number-&gt;datestr (ldate-day a-date))))\n\n(define (repeat-biweekly format-str-base\n                         #:from from\n                         #:until [until #f]\n                         . other-format-strs)\n  (define format-str (apply string-append\n                            (cons format-str-base other-format-strs)))\n  (repeat-monthly (string-append (string-replace format-str \"%d\" \"01\")\n                                 (string-replace format-str \"%d\" \"14\"))\n                  #:from from\n                  #:until until))\n\n(define (repeat-yearly format-str-base\n                       #:from from\n                       #:until [until #f]\n                       . other-format-strs)\n  (define format-str (apply string-append\n                            (cons format-str-base other-format-strs)))\n  (let repeat ([output-so-far \"\"]\n               [from from]\n               [until (or until (ltoday))])\n    (if (ldate-&lt; from until)\n        (repeat (string-append output-so-far\n                               (format-date format-str from))\n                (next-year from)\n                until)\n        output-so-far)))\n\n(define (repeat-monthly format-str-base\n                        #:from from\n                        #:until [until #f]\n                        . other-format-strs)\n  (define format-str (apply string-append\n                            (cons format-str-base other-format-strs)))\n  (let repeat ([output-so-far \"\"]\n               [from from]\n               [until (or until (ltoday))])\n    (if (ldate-&lt; from until)\n        (repeat (string-append output-so-far\n                               (format-date format-str from))\n                (next-month from)\n                until)\n        output-so-far)))\n\n(provide repeat-monthly repeat-yearly repeat-biweekly ldate)</code></pre>\n\n<p>I can repeat items yearly, monthly, and biweekly in my ledger file like so</p>\n\n<pre><code>#lang scribble/text\n\n@require{ledger-repeat.rkt}\n; rent\n@repeat-monthly[#:from (ldate 2016 1 1) #:until (ldate 2018 5 30)]{\n%y/%m/%d * Management\n    ; Monthly rent\n    expenses:basics:rent  300\n    checkings\n@; Ensure newline\n@\"\\n\"\n}</code></pre>\n\n<p>Running</p>\n\n<pre><code>racket ledger.dat</code></pre>\n\n<p>produces the &ldquo;plain&rdquo; ledger data file that can be fed into ledger by piping the output to ledger and passing the <code>-f -</code> flag (indicating to read data from stdin). For example, getting the balance report looks like this:</p>\n\n<pre><code>racket ledger.dat | /usr/bin/ledger bal -f -</code></pre>")) ((p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-08-12-home-nextcloud.md" . unix) f post (u . "Setting up a home cloud server with Nextcloud") (? . 12) 1534113546 (p+ #"/home/lukas/github_sync/projects/website/2018/08/setting-up-a-home-cloud-server-with-nextcloud.html" . unix) (u . "/2018/08/setting-up-a-home-cloud-server-with-nextcloud.html") (u . "2018-08-12T11:32:37") (? . 6) (? . 7) (c (u . "linux") c (u . "networking")) (u . "\n<p>This weekend, I set up a home server for my parents running Nextcloud so that they can have their own, (almost) free cloud storage. The process was surprisingly simple and fun, though there are a number of steps involved, so I&rsquo;m documenting it here for the sake of reproducibility.</p>") #t (u . "\n<p>This weekend, I set up a home server for my parents running Nextcloud so that they can have their own, (almost) free cloud storage. The process was surprisingly simple and fun, though there are a number of steps involved, so I&rsquo;m documenting it here for the sake of reproducibility.</p>\n<!-- more-->\n\n<p>All I needed to do this was: 1. A computer to run as a server. Any kind of computer works &#8211; I used an old macbook pro. 2. Administrative access to my router.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"basic-setup-for-a-local-cloud-with-remote-accessibility\">Basic setup for a local cloud with remote accessibility</h1>\n\n<h2 id=\"three-virtual-machines\">Three virtual machines</h2>\n\n<p>I set this up using three virtual machines each acting as an independent server with a single task. Note that only two VMs are actually necessary to have a working setup; the third serves as an openvpn server so that I can manage the other two servers remotely as if I were on the LAN. If you&rsquo;re trying to set something like this up yourself and don&rsquo;t want or need that, just skip everything about the openvpn server.</p>\n\n<p>I set up all three VMs to run in Virtualbox. I used Virtualbox to run the VMs because it&rsquo;s easy to use and runs on a mac without hassle. Just download and install virtualbox from their website, and also download an image (<code>.iso</code>) of ubuntu server. Once virtualbox is up and running, create three new VMs. The first will act as a reverse proxy and the second as a vpn server. When prompted about the virtual disk for these, pick dynamically sized with a max of 8GB. The last VM will be the nextcloud server, so make its virtual disk dynamic with a max as big as reasonable; I used nearly all of the remaining space on the macbook&rsquo;s 1TB SSD, leaving 20GB or so so the macOS doesn&rsquo;t run into any issues if it fills up.</p>\n\n<p>After performing the initial setup of the VMs, go into the settings of each one and change their network adaptor mode to &ldquo;bridged&rdquo;. The relevant option will be under &ldquo;Networking&rdquo; in the VM settings. Doing this will make each of the VMs visible on the local network as independent hosts.</p>\n\n<h2 id=\"nextcloud-server-setup\">Nextcloud server setup</h2>\n\n<p>Then, start up the nextcloud server and select the ubuntu server image when prompted for a startup disk. This will load up the ubuntu live CD and go through the installation steps. The only extra step to do during the installation is to select the nextcloud snap when prompted with commonly installed snaps. After the installation is finished, nextcloud is pretty much done and ready to use on the LAN! To try it out, log in to the machine and find out its ip with <code>ifconfig</code>. Go to that ip in a web browser and you should be greeted with a nextcloud welcome page prompting you to set up an administrator account. You might as well do that while you&rsquo;re there.</p>\n\n<h2 id=\"reverse-proxy-server-setup\">Reverse proxy server setup</h2>\n\n<p>Next, start up the reverse proxy server and go through the motions of installing ubuntu server, this time <span class=\"underline\">not</span> selecting any snaps when prompted. Once logged in, install <code>nginx</code> if necessary (it was already installed on my image). Then, find the ip of this server with <code>ifconfig</code> and take a note of it (I&rsquo;ll refer to it as <code>nginx-ip</code>, and the ip of the nextcloud server as <code>nextcloud-ip</code>). Then, make a file at <code>/etc/nginx/sites-available/nextcloud.conf</code> and fill it as follows; don&rsquo;t forget to replace the &rsquo;s with their real values!</p>\n\n<pre><code>sudo vi /etc/nginx/sites-available/nextcloud.conf\n\nserver {\n# The IP that you forwarded in your router (nginx proxy)\n  listen &lt;nginx-ip&gt;:80 default_server;\n\n# The internal IP of the VM that hosts your Apache config\n# set $upstream &lt;nginx-ip&gt;;\nlocation / {\n        proxy_headers_hash_max_size 512;\n        proxy_headers_hash_bucket_size 64;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        add_header Front-End-Https on;\n        # whatever the IP of your cloud server is\n        proxy_pass http://&lt;nextcloud-ip&gt;;\n        }\n}</code></pre>\n\n<p>Then symlink that config to <code>/etc/nginx/sites-enabled/</code> and restart nginx:</p>\n\n<pre><code>sudo ln -s /etc/nginx/sites-available/nextcloud.conf /etc/nginx/sites-enabled/\nsudo service nginx restart</code></pre>\n\n<p>And now accessing the nginx server&rsquo;s ip should redirect to the nextcloud server. Try it out (again) by going to the nginx server&rsquo;s ip in a web browser.</p>\n\n<p><strong>Resource</strong> <a href=\"https://www.techandme.se/set-up-nginx-reverse-proxy/\">This guide</a> helped me construct the config to get this working.</p>\n\n<h2 id=\"openvpn-server-setup\">Openvpn server setup</h2>\n\n<p>Lastly, boot up the final remaining VM and install ubuntu in the same way as the last one (the reverse proxy server). Once logged in, just follow the <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04\">this long but easy tutorial</a> to set up openvpn. Note that that tutorial assumes you are using bash (which matters when setting up environment variables).</p>\n\n<p>The only caveat to note while completing the tutorial is that before doing step 11 you should generate a key for accessing the vpn.</p>\n\n<pre><code>cd ~/openvpn-ca\nsource ./vars\n./build-key linux-client</code></pre>\n\n<p>(hit enter through all the prompts, then &lsquo;y&rsquo; to complete).</p>\n\n<p>For step 12, just scp the config to your own computer, and then you can connect to the server through the vpn with</p>\n\n<pre><code>sudo openvpn --config linux-client.ovpn</code></pre>\n\n<h3 id=\"making-the-vpn-accessible-from-the-internet\">Making the vpn accessible from the internet</h3>\n\n<p>The vpn is only really useful if it can be reached from the internet, so port forwarding needs to be set up in the router to forward internet traffic to the vpn server. To do this, just configure the router to forward UDP traffic on port 1194 to the openvpn server&rsquo;s ip address. Note that this only really makes sense if the openvpn server has a static ip, as described in the next section. Furthermore, because ISP&rsquo;s regularly change the public IP of normal routers, it probably also makes sense to set up dynamic dns to access the vpn.</p>\n\n<h2 id=\"setting-static-ips-for-the-vms\">Setting static ips for the VMs</h2>\n\n<p>Now, go into your router&rsquo;s management page and set static ips for each of the three VMs. I just used their current ips for simplicity; otherwise, the reverse proxy nginx config would need to be updated with the new ips. Restart the router and check that all the VMs have the assigned ips, and that they will never expire.</p>\n\n<h2 id=\"local-cloud-with-remote-accessibility\">Local cloud with remote accessibility</h2>\n\n<p>This is all that needs to be done to have nextcloud accessible on the LAN (via an ip address) as well as remotely when connected to the vpn.</p>\n\n<p>To make the server more easily accessible, however, it can be exposed to the internet so that the nextcloud can be reached from anywhere in the world. The following steps detail how to do that.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"exposing-the-server-to-the-internet\">Exposing the server to the internet</h1>\n\n<p>Exposing the nextcloud server to the internet makes it much more convenient. For example, with a domain name it can be made accessible through a url instead of an ip address.</p>\n\n<p>There are a few steps involved in making this happen: 1. Forwarding internet traffic from the router to the server 2. Setting up dynamic dns 3. Setting up ssl encryption</p>\n\n<h2 id=\"port-forwarding\">Port forwarding</h2>\n\n<p>Back in the router&rsquo;s settings, configure port forwarding as follows: 1. Forward traffic of any kind on port 80 to the nginx server. 2. Forward TCP traffic on port 443 to the nginx server.</p>\n\n<p>Restart the router and now navigating to your public ip (find it with <a href=\"https://www.whatismyip.com/\">whatismyip</a>) should take you to the nextcloud.</p>\n\n<h2 id=\"dynamic-dns\">Dynamic DNS</h2>\n\n<p>Setting up dynamic dns will make the nextcloud accessible from a url instead of a public ip, which ISPs change regularly anyway. If you have a google domain like me, then Google provides a free dynamic dns service along with the domain; that is what I used. Setting it up on Google&rsquo;s end is pretty easy following <a href=\"https://support.google.com/domains/answer/6147083?hl%3Den\">their instructions</a>. There are many dynamic dns services, such as no-ip etc, all of which will have a similar process to what I describe below.</p>\n\n<p>To set up the local end that notifies the dns servers of ip changes, log in to the nginx server. Install <code>ddclient</code>, which took me a few extra steps than expected because ubuntu server doesn&rsquo;t have the <a href=\"https://help.ubuntu.com/community/Repositories/Ubuntu\">universe repository</a> enabled by default in ubuntu server 18.04. Fixing that is easy, though. Just edit <code>/etc/apt/sources.list</code> and duplicate the line with <code>deb &lt;url&gt; bionic main</code>, then change the <code>main</code> in the duplicated line to <code>universe</code>. After doing that update and <code>ddclient</code> should be available as normal:</p>\n\n<pre><code>sudo apt update &amp;&amp; sudo apt install ddclient</code></pre>\n\n<p>With <code>ddclient</code> installed, I set up the config as described in <a href=\"https://support.google.com/domains/answer/6147083?hl%3Den\">Google&rsquo;s instructions</a> using the &ldquo;ddclient without Google Domains support&rdquo; config. One thing to note is that the username and password in the config should be in &lsquo;single quotes&rsquo;. Once that is done, test that the configuration works</p>\n\n<pre><code>sudo ddclient -daemon=0 -debug -verbose -noquiet</code></pre>\n\n<p>and if all is well you should be able to go to your configured domain to access the nextcloud server!</p>\n\n<h3 id=\"adding-the-nextclouds-external-url-as-a-trusted-proxy\">Adding the nextcloud&rsquo;s external url as a trusted proxy</h3>\n\n<p>Upon reaching the nextcloud server for the first time from its now-configured url, nextcloud complained that the url was not a &ldquo;trusted proxy&rdquo;. I clicked the button provided in the prompt, and just to be safe I also followed <a href=\"https://docs.nextcloud.com/server/9/admin_manual/configuration_server/reverse_proxy_configuration.html\">the docs&rsquo; instructions on adding a reverse proxy configuration</a>, adding a line to <code>/var/snap/nextcloud/&lt;some number here&gt;/nextcloud/config/config.php</code> containing</p>\n\n<pre><code>\"trusted_proxies\"   =&gt; ['&lt;nextcloud-ip&gt;', '&lt;your-domain.url&gt;'],</code></pre>\n\n<h2 id=\"ssl-encryption\">SSL encryption</h2>\n\n<p>The last step that should really be done if the nextcloud will be accessed over the internet is to set up SSL encryption so that the server can be accessed through HTTPS. This will ensure that your files etc will be encrypted en route to and from the server &#8211; though not <em>on</em> the server, which is fine since an account with a password is required to access it.</p>\n\n<p>This is actually pretty easy to do thanks to <a href=\"https://letsencrypt.org/\">Let&rsquo;s Encrypt</a>. First, port forwarding needs to be set up on port 443 because that&rsquo;s the port used for ssl. This was already done in the port forwarding section above.</p>\n\n<p>The next step is to obtain ssl certificates, which is also pretty easy. The certificates need to be set up on the nginx server, because that will be the terminal for ssl connections. So log into the nginx server and install Let&rsquo;s Encrypt&rsquo;s certbot following <a href=\"https://certbot.eff.org/lets-encrypt/ubuntuartful-nginx\">the installation instructions on the website</a>.</p>\n\n<p>Before running <code>certbot</code>, however, I needed to disable the reverse proxy traffic forwarding of the nginx server. To do this, just disable the proxy config and restart nginx before running certbot.</p>\n\n<pre><code>sudo rm /etc/nginx/sites-enabled/nextcloud.conf\nsudo service nginx restart\nsudo certbot --nginx</code></pre>\n\n<p>Then, reinstall the proxy config</p>\n\n<pre><code>sudo ln -s /etc/nginx/sites-available/nextcloud.conf /etc/nginx/sites-enabled/</code></pre>\n\n<p>and edit it to be like this:</p>\n\n<pre><code>server {\n# The IP that you forwarded in your router (nginx proxy)\n  listen &lt;nginx-ip&gt;:443 ssl ipv6only=on;\n  server_name &lt;your-domain.url&gt;;\n  listen 443 ssl; # managed by Certbot\n  ssl_certificate /etc/letsencrypt/live/&lt;your-domain.url&gt;/fullchain.pem; # managed by Certbot\n  ssl_certificate_key /etc/letsencrypt/live/&lt;your-domain.url&gt;/privkey.pem; # managed by Certbot\n  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n\n# The internal IP of the VM that hosts your Apache config\n# set $upstream &lt;nginx-ip&gt;;\nlocation / {\n        proxy_headers_hash_max_size 512;\n        proxy_headers_hash_bucket_size 64;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        add_header Front-End-Https on;\n        # whatever the IP of your cloud server is\n        # Note that it's forwarding traffic to port 80 because the nextcloud server\n        # is only set up for http (not ssl)\n        proxy_pass http://&lt;nextcloud-ip&gt;:80;\n        }\n}</code></pre>\n\n<p>Finally, restart nginx</p>\n\n<pre><code>sudo service nginx restart</code></pre>\n\n<p>In the event that you get some mixed-content warnings from nextcloud, <a href=\"https://bayton.org/docs/nextcloud/nexcloud-behind-a-proxy-fixing-mixed-content-warnings-with-ssl/\">this might be helpful</a>.</p>\n\n<p><strong>Resource</strong> The configuration and discussion in <a href=\"https://www.reddit.com/r/NextCloud/comments/7qsdhj/nextcloud_with_ssl_over_reverse_proxy/\">this reddit post</a>, as well as the settings inserted by <code>certbot</code>, guided me toward the above working configuration.</p>\n\n<h3 id=\"setting-up-automatic-certificate-renewal\">Setting up automatic certificate renewal</h3>\n\n<p>The ssl certificates expire every 90 days, but they can be easily and non-interactively renewed with</p>\n\n<pre><code>sudo certbot renew</code></pre>\n\n<p>So just set up a cron job to do this every other month or so.</p>\n\n<pre><code>sudo crontab -e</code></pre>\n\n<p>Adding the line</p>\n\n<pre><code>0 0 1 */2 * /usr/bin/certbot -q renew</code></pre>\n\n<p>Which will automatically renew the certificates at midnight on the first of every other month.</p>")) ((p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-07-09-modal-editing-emacs.md" . unix) f post (u . "Modal Editing in Emacs") (? . 9) 1532058805 (p+ #"/home/lukas/github_sync/projects/website/2018/07/modal-editing-in-emacs.html" . unix) (u . "/2018/07/modal-editing-in-emacs.html") (u . "2018-07-09T02:02:02") (? . 10) (? . 8) (c (u . "emacs")) (u . "\n<p>Modal editing in emacs is easy, and can be much better than vim.</p>") #t (u . "\n<p>Modal editing in emacs is easy, and can be much better than vim.</p>\n<!-- more-->\n\n<br />\n\n<br />\n\n<h1 id=\"emacs-and-vim-modal-editing\">Emacs and vim: modal editing</h1>\n\n<p>The holy war of text editors will never be resolved, because emacs and vim represent wholly different philosophies of what they want to be. Vim wants to be a lightweight yet powerful text editor. <em>Emacs doesn&rsquo;t even want to be a text editor</em>, and it isn&rsquo;t one. Emacs is more aptly described as a text-based programming environment. This is clear when one actually looks at how emacs works and emacs lisp: all editing commands are functions, just as well executed by pressing keys as by an elisp program.</p>\n\n<p>What inevitably comes up in the debate about text editors, however, is not interesting differences like that. One of the main things people argue about is modal editing. Emacs&rsquo; default text insertion strategy is not modal, while vim&rsquo;s is. For many people, modal editing is so fast and effective that this alone makes vim better than emacs.</p>\n\n<p>I actually agree, though not about vim being better ;). Modal editing is, in my opinion, a much more effective way to work with text most of the time. Given what I described above about emacs, however, it should be clear that this is hardly a real difference. It&rsquo;s just a matter of writing the (little bit of) code for modal editing in emacs and binding the code to keys. Or, for those who want things to be as close as possible to vim and/or are lazy, there&rsquo;s <a href=\"https://www.emacswiki.org/emacs/Evil\">EVIL mode</a>.</p>\n\n<p>But I have found writing my own modal editing system beneficial. First of all, I don&rsquo;t think that <em>all</em> of the ways vim does things are great (or even good), though many of them are great. So I want to be able to pick and choose the features I like, and mix in my own useful features. By writing my own mode, I have the power to make the system exactly as I like it.</p>\n\n<p>And it&rsquo;s not even very hard.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"minor-modes-for-modal-editing\">Minor modes for modal editing</h1>\n\n<p>Emacs&rsquo; <a href=\"https://www.gnu.org/software/emacs/manual/html_node/emacs/Modes.html\">system of major and minor modes</a> is quite expressive. Namely, it makes it almost trivial to implement modal editing that works everywhere. Both major and minor modes can create new keybindings. Since major modes change depending on the type of text being worked on, but minor modes generally operate independently of that, a minor mode is the simplest route.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"what-am-i-actually-talking-about\">What am I actually talking about?</h1>\n\n<p>Before describing how to implement modal editing as a minor mode, let&rsquo;s quickly review how modal editing works at an abstract level - so that it&rsquo;s clear why all the pieces are necessary and the roles they play.</p>\n\n<p>Modal editing at its simplest means that text editing is done in two or more modes, each of which has presents a different interface for interacting with text. The simplest way to think of this is probably similar to vim&rsquo;s two primary modes (though I&rsquo;m going to simplify them a bit): &ldquo;insertion&rdquo; and &ldquo;normal&rdquo; modes, which I&rsquo;ll call &ldquo;command&rdquo; mode from here on. In insertion mode, text can be typed, deleted (with backspace), etc, but the cursor can&rsquo;t be moved around and &ldquo;extra&rdquo; operations can&rsquo;t be done. Just typing text. In command mode, the cursor can be moved and text manipulation operations like copy/pasta, search/replace, etc are available; furthermore, these commands can are executed using single key combinations, without any modifiers (ctrl, alt, etc).</p>\n\n<p>This is a simplified version of how vim&rsquo;s modal editing works, and the system below will be a functionally similar approximation. Instead of creating both modes, I approximate emacs&rsquo;s default mode as the equivalent of insert mode: actually, it&rsquo;s much better in my opinion because all of emacs&rsquo; normal bindings to do manipulation are available, just without the single key shortcuts.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"creating-a-custom-editing-minor-mode\">Creating a custom editing minor mode</h1>\n\n<p>As I just mentioned, I don&rsquo;t actually create a special insert mode; I just use emacs&rsquo;s normal bindings. That means all there is to make is the command mode, which provides the single-key shortcuts characteristic of vim.</p>\n\n<p>Every mode in the modal editing system should have a corresponding minor mode - except the normal insertion mode. So one minor mode is necessary to create the command mode. The way it works is simple; when the minor mode is active, we are in command mode, otherwise we aren&rsquo;t. So the way to enter and exit is simply to activate/deactivate the minor mode. Since a minor mode has its own keybindings, the shortcuts will just be keybindings in the minor mode.</p>\n\n<p>Thankfully, creating a new minor mode is easy with <a href=\"https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Minor-Modes.html\">define-minor-mode</a>. All that&rsquo;s necessary is a name, docstring, lighter symbol (for indicating on the modeline when the mode is active), and a keymap for bindings.</p>\n\n<pre><code>(define-minor-mode some-mode-name\n  \"Docstring\"\n  ;; initial value\n  nil\n  ;; indicator for mode line\n  \" modeline-indicator\"\n  ;; minor mode bindings\n  '(((kbd \"key string as shown by C-h k\") . some-interactive-function)\n    ...)\n  :group 'some-not-really-important-symbol)</code></pre>\n\n<p>Since this mode will be frequently enabled and disabled in the course of editing, the first command necessary is a toggle function. This is really simple, because <code>define-minor-mode</code> automatically creates a variable with the same name as the mode which is not <code>nil</code> when the mode is active and <code>nil</code> otherwise. Then just bind the keys to enter and exit the command mode, respectively with <code>global-set-key</code> and by placing the binding in the mode&rsquo;s keymap. Picking a good binding to enter the command mode may be difficult (<code>ESC</code> is annoying to rebind because emacs interprets it as an alternative <code>ALT</code> key), so choose wisely; I use <code>M-SPC</code> and quite like it. Here is a MWE providing vim-like hjkl movement. Press <code>M-SPC</code> to enter the mode, and <code>i</code> to exit.</p>\n\n<pre><code>(define-minor-mode my-command-mode\n  \"my-command-mode is a minor mode for modal editing.\n\nUse `toggle-my-command-mode' to enter and exit the mode.\n\nmy-command-mode defines the following bindings:\n\\\\{my-command-mode-map}\n\"\n  ;; initial value\n  nil\n  ;; indicator for mode line\n  \" mcm\"\n  ;; minor mode bindings\n  '(((kbd \"i\") . toggle-my-command-mode)\n\n    ((kbd \"j\") . next-line)\n    ((kbd \"k\") . previous-line)\n    ((kbd \"h\") . backward-char)\n    ((kbd \"l\") . forward-char))\n  :group 'mcm-group)\n\n(defun toggle-my-command-mode (&amp;optional set-state)\n  \"Toggle `my-command-mode', optionally ensuring its state with `SET-STATE'.\n\n`SET-STATE' is interpreted as follows:\n  nil   (Same as no argument) Toggle `my-command-mode'\n  -1    Ensure `my-command-mode' is disabled\n  else  Ensure `my-command-mode' is enabled\n\"\n  (cond ((equal set-state -1)\n         (when my-command-mode\n           (my-command-mode -1)))\n\n        ((equal set-state nil)\n         (my-command-mode (if my-command-mode -1 1)))\n\n        (else\n         (unless my-command-mode\n           (my-command-mode 1)))))\n\n(global-set-key (kbd \"M-SPC\") 'toggle-my-command-mode)</code></pre>\n\n<p>An aside for those unfamiliar with emacs lisp: To try this out just copy-pasta it into any buffer (like <code>*scratch*</code>), highlight it, and execute (with <code>M-x</code>) <code>eval-region</code>. Also, if you&rsquo;re particularly careful about your code, you may be wondering why it&rsquo;s ok that the minor mode definition binds <code>toggle-my-command-mode</code>, even though it isn&rsquo;t defined yet. Actually, the code binding the function to the key just registers the <span class=\"underline\">name</span> of a function and associates it with the key; when that key is pressed, the function associated with the name is looked up dynamically. Thus, it&rsquo;s no problem to provide any arbitrary symbol (defined or not) to the binding code, you&rsquo;ll only run into issues if the symbol is still undefined when the key gets pressed. In this case, the function is defined right away so that won&rsquo;t happen.</p>\n\n<p>Ultimately, this pattern is how much of the functionality of the mode is implemented. For many actions, however, there is likely a built-in command to do it, so use those instead. For example, most basic movement commands are available built-in, like those shown above for moving the cursor bound to hjkl.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"extra-context-menus-with-hydra\">Extra: context menus with hydra</h1>\n\n<p>The excellent <a href=\"https://github.com/abo-abo/hydra\">hydra package</a> provides a great way to create context menus for some of the more specialized commands that one might want bindings for, but may be difficult to memorize. It&rsquo;s very easy to use; for example, here is a hydra that I use for register management.</p>\n\n<pre><code>(defhydra mcm/hydra/registers (:color blue :hint nil)\n    \"\nRegister commands\n_s_: Save point                 _n_: Number to register\n_j_: Jump to register         _i_/_+_: Increment number in register\n_y_: Copy to register           _h_: Show registers\n_p_: Insert from register       _w_: Window config to register\n\"\n    (\"s\" point-to-register)\n    (\"j\" jump-to-register)\n    (\"y\" copy-to-register)\n    (\"p\" insert-register)\n    (\"h\" helm-register)\n    (\"n\" number-to-register)\n    (\"i\" increment-register)\n    (\"+\" increment-register)\n    (\"w\" window-configuration-to-register)\n    (\"q\" nil))\n;; The function to activate this hydra is `mcm/hydra/registers/main'</code></pre>\n\n<br />\n\n<br />\n\n<h1 id=\"my-own-modal-editing-system\">My own modal editing system</h1>\n\n<p>As an example of all of this in practice, <a href=\"https://gist.github.com/LLazarek/d9c226763860c3f53a6d28535e9efb64\">here is the system</a> for modal editing that I have used for the past few years. I called it Nav-mode because initially I started it just for easier navigation; it has since evolved well beyond that, but I see little reason to change the name.</p>\n\n<p>Note that it includes bindings for a number of custom commands and packages I haven&rsquo;t included, so it isn&rsquo;t quite plug and play, but the essence should be clear. Some highlights of extra packages that I use in the mode include <a href=\"https://github.com/emacs-helm/helm\">helm</a>, <a href=\"https://github.com/abo-abo/avy\">avy</a>, <a href=\"https://github.com/magnars/multiple-cursors.el\">multiple-cursors</a>, <a href=\"https://github.com/Fuco1/smartparens\">smartparens</a>, <a href=\"https://github.com/abo-abo/hydra\">hydra</a>.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"thats-it\">That&rsquo;s it!</h1>\n\n<p>Modal editing is not only possible in emacs, it&rsquo;s quite easy. Furthermore, it&rsquo;s highly customizable, allowing me to tailor it precisely to my needs. I have used this particular system of modal editing for a few years and I would unequivocally recommend it to anyone using emacs.</p>")) ((p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-07-09-better-agenda.md" . unix) f post (u . "Improving the Agenda") (? . 8) 1532058725 (p+ #"/home/lukas/github_sync/projects/website/2018/07/improving-the-agenda.html" . unix) (u . "/2018/07/improving-the-agenda.html") (u . "2018-07-09T03:27:27") (? . 9) (? . 5) (c (u . "emacs") c (u . "org")) (u . "\n<p>Org mode&rsquo;s agenda is a fantastic interface for viewing and managing tasks. However, its default display settings get cluttered with large numbers of tasks, making it difficult to see what really needs to be done. Here are some of the ways I make the agenda crystal clear.</p>") #t (u . "\n<p>Org mode&rsquo;s agenda is a fantastic interface for viewing and managing tasks. However, its default display settings get cluttered with large numbers of tasks, making it difficult to see what really needs to be done. Here are some of the ways I make the agenda crystal clear.</p>\n<!-- more-->\n\n<br />\n\n<br />\n\n<h1 id=\"context\">Context</h1>\n\n<p>I have found org mode&rsquo;s agenda an invaluable tool for keeping myself organized over the years. However, I can easily see how many newcomers to org fail to see its potential; the default display settings for the agenda leave much to be desired. Indeed, when I first started using the agenda to plan and manage my work, I often found myself staring at the agenda, overwhelmed by the sheer number of tasks and struggling to figure out what really needed to be done <span class=\"underline\">now</span>.</p>\n\n<p>A few appearance tweaks can make a world of difference, however. The primary tools for doing this are simply color and text emphasis (bold, italics, underline). The default settings don&rsquo;t really leverage colors and text emphasis to group and highlight tasks. The second tool available is controlling the sorting of tasks with priorities. Finally, the agenda provides rich filtering tools to make dealing with lots of disparate tasks a little easier.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"grouping-and-emphasizing-tasks-with-color\">Grouping and emphasizing tasks with color</h1>\n\n<p>The most obvious way to help make more visual sense of the agenda is to color-code tasks. While this functionality is not built-in, it&rsquo;s quite easy to add. I think the most useful way to do this (thought not the easiest, see below) is by associating colors with tags, and colorizing tasks in the agenda according to their tags. The following function does just that; it can be invoked in <code>org-finalize-agenda-hook</code>. (Note that I can&rsquo;t claim full credit for this function, it is largely based on a stackoverflow answer I have since forgotten.)</p>\n\n<pre><code>(defun ll/org/agenda/color-headers-with (tag col)\n  \"Color agenda lines matching TAG with color COL.\"\n  (interactive)\n  (goto-char (point-min))\n  (while (re-search-forward tag nil t)\n    (unless (find-in-line \"\\\\[#[A-Z]\\\\]\")\n      (let ((todo-end (or (ll/org/agenda/find-todo-word-end)\n                          (point-at-bol)))\n            (tags-beginning (or (find-in-line \" :\" t)\n                                (point-at-eol))))\n        (add-text-properties todo-end\n                             tags-beginning\n                             `(face (:foreground ,col)))))))\n\n;; Helper definitions\n(setq ll/org/agenda-todo-words\n      '(\"TODO\" \"GOAL\" \"NEXT\" \"STARTED\" \"WAITING\" \"REVIEW\" \"SUBMIT\"\n        \"DONE\" \"DEFERRED\" \"CANCELLED\"))\n(defun find-in-line (needle &amp;optional beginning count)\n  \"Find the position of the start of NEEDLE in the current line.\n  If BEGINNING is non-nil, find the beginning of NEEDLE in the current\n  line. If COUNT is non-nil, find the COUNT'th occurrence from the left.\"\n  (save-excursion\n    (beginning-of-line)\n    (let ((found (re-search-forward needle (point-at-eol) t count)))\n      (if beginning\n          (match-beginning 0)\n        found))))\n(defun ll/org/agenda/find-todo-word-end ()\n  (reduce (lambda (a b) (or a b))\n          (mapcar #'find-in-line ll/org/agenda-todo-words)))</code></pre>\n\n<p>Example usage:</p>\n\n<pre><code>(defun ll/org/colorize-headings ()\n  ;; Color all headings with :pers: tan\n  (ll/org/agenda/color-headers-with \":pers:\" \"tan\")\n  ;; and :work: blue\n  (ll/org/agenda/color-headers-with \":work:\" \"blue\"))\n(add-hook 'org-agenda-finalize-hook #'ll/org/colorize-headings)</code></pre>\n\n<p>Note that this function iterates over the agenda entries, modifying their face each time it is called. So if an entry has a tag that is matched by more than one call to this function (e.g. it&rsquo;s tagged with <code>:pers:work:</code>), then <span class=\"underline\">the task will have the color of the last call</span>.</p>\n\n<p>Another way to do color coding (which takes precedence over the above method) is using priorities (about which I&rsquo;ll say more later). Org has a built-in mechanism to colorize and emphasize tasks marked with <a href=\"https://orgmode.org/manual/Priorities.html#Priorities\">a priority</a> (<code>[#A]</code>, <code>[#B]</code>, etc). Thus, it&rsquo;s straightforward to do. In general though, I prefer the tag-based coloring for grouping/categorizing tasks. This is the configuration I use, highlighting tasks with priority A in bolded magenta, B in light green, and C in orange.</p>\n\n<pre><code>(customize-set-variable 'org-agenda-fontify-priorities t)\n(customize-set-variable 'org-priority-faces\n                        (quote ((?A :foreground \"magenta\" :weight bold)\n                                (?B :foreground \"green3\")\n                                (?C :foreground \"orange\"))))</code></pre>\n\n<br />\n\n<br />\n\n<h1 id=\"sorting\">Sorting</h1>\n\n<p>Another way to help identify important tasks more easily is using sorting. As you might have guessed, priorities are not only useful for highlighting tasks; they also affect the sorting of tasks in the agenda. Higher priority tasks show up before lower priority ones within the same category (overdue, scheduled, deadline) in the agenda. By default, tasks have a priority of B; I find this unintuitive, so I set the default priority to C. This way tasks with priority A show first, then B, then C, then the rest.</p>\n\n<pre><code>;; Set default priority to C\n(customize-set-variable 'org-default-priority ?C)</code></pre>\n\n<p>You might ask &ldquo;why not make the default priority be lower than C, so that tasks with any priority at all show up first?&rdquo; It turns out that the default priority has to be at least the lowest priority (<code>org-lowest-priority</code>), which by default is C. Of course, it is possible to have as low a priority as you like (within reason), such as D, E, &#8230;, Z. I don&rsquo;t find that to be useful, however. Two high-priority priorities are enough.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"filtering\">Filtering</h1>\n\n<p>The agenda also provides filtering functions to restrict the displayed tasks. They are pretty self-explanatory; in the agenda, hit \"/\" to filter by tag and \"=\" to filter by regular expression. Press \"/\" again to clear or narrow further, or in the case of regexp filtering press \"|\" to clear the filter.</p>\n\n<p>The only noteworthy point about filtering is that the tag filter cannot express disjunction. This has caused me some grief, as I have wanted to filter with something like &ldquo;work OR school&rdquo;. The solution, though, is to just use the regexp filter with a pattern like \":(work|school)\".</p>\n\n<br />\n\n<br />\n\n<h1 id=\"showing-more-stuff\">Showing more stuff</h1>\n\n<p>Having cleaned up the agenda and made it easier to read, it might become appealing to start showing more relevant details. For example, seeing the notes in the body of a task is sometimes useful. Alternatively, it might be useful to see the value of some <a href=\"https://orgmode.org/manual/Properties-and-columns.html#Properties-and-columns\">properties of the task</a>. Of course, the agenda can do it.</p>\n\n<p>Showing context lines from the body of the task is as simple as pressing a key in the agenda; &ldquo;E&rdquo; invokes <code>org-agenda-entry-text-mode</code> (see <a href=\"https://orgmode.org/manual/Agenda-commands.html#Agenda-commands\">the manual</a>), showing some lines from the body of the task. To enable this behavior by default, configure <code>org-agenda-start-with-entry-text-mode</code>. The number of lines can also be configured with <code>org-agenda-entry-text-maxlines</code>. For example:</p>\n\n<pre><code>;; Show context lines by default in the agenda\n(customize-set-variable 'org-agenda-start-with-entry-text-mode t)\n;; Show up to 4 lines of context\n(customize-set-variable 'org-agenda-entry-text-maxlines 4)</code></pre>\n\n<p>However, I find that the context provided by org creates too much clutter to be useful. This is especially true when I have stuff written in the body of a task that I <em>don&rsquo;t</em> want to see in the agenda (often): <code>entry-text-mode</code> provides no way to configure <em>which</em> entries to show context for. Thus, I prefer the alternative way to show more information, which is to show the values of specific properties when they are present in the task.</p>\n\n<p>Showing property values in the agenda is provided by the excellent <a href=\"https://github.com/Malabarba/org-agenda-property\">org-agenda-property package</a>, available on MELPA. Here&rsquo;s the configuration that I use to show the value in three properties that I use to record why a task is blocked, deferred, or canceled, and to write short notes on the task.</p>\n\n<pre><code>(use-package org-agenda-property\n  :config\n  (customize-set-variable 'org-agenda-property-list\n                          '(\"WAITING?\" \"DEFERRED?\" \"CANCELLED?\" \"NOTE\"))\n  (customize-set-variable 'org-agenda-property-position 'same-line))</code></pre>")) ((p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-05-22-ptext.scrbl" . unix) f post (u . "Language-oriented Programming: ptext") (? . 13) 1528409206 (p+ #"/home/lukas/github_sync/projects/website/2018/05/language-oriented-programming-ptext.html" . unix) (u . "/2018/05/language-oriented-programming-ptext.html") (u . "2018-05-22T19:06:27") #f (? . 10) (c (u . "PL") c (u . "racket")) (u . "\n<p>Language-oriented programming in action with racket.</p>") #t (u . "\n<p>Language-oriented programming in action with racket.</p>\n<!--more-->\n\n<blockquote class=\"refpara\">\n <blockquote class=\"refcolumn\">\n  <blockquote class=\"refcontent\">\n   <p><span style=\"font-weight: bold\">Note</span>\nI recently learned about <a href=\"https://docs.racket-lang.org/scribble/index.html\">scribble</a>, and specifically <a href=\"https://docs.racket-lang.org/scribble-pp/index.html\">how scribble as a text preprocessor</a>.\nIt is far superior to ptext in terms of being actually useful.</p></blockquote></blockquote></blockquote>\n\n<p>A year or two ago, I wrote a text preprocessor to allow embedded text\ngeneration using <a href=\"https://racket-lang.org/\">racket</a>.\nThe idea was to be able to embed racket expressions inside a text file\nto manipulate its contents and generate a new file.\nAt its simplest, the tool would just extract the the racket\nexpressions, evaluate them, and insert the results back into the file.\nI came up with the idea because I had a problem with\n<a href=\"https://www.ledger-cli.org/\">ledger</a> that such a tool would\nneatly solve, while possibly being useful for many other similar\nthings.</p>\n\n<p>I used racket mostly because I had just started learning it, and I\ndidn&rsquo;t really leverage any of its most interesting features.\nIn fact, I spent most of my time figuring out how to circumvent some\nof racket&rsquo;s design decisions (like the module system and constrained\n<span class=\"RktSym\">eval</span><span class=\"RktMeta\"></span>).\nI ended up with a few hundred lines of complicated code to do\nsomething that, at least conceptually, is pretty simple.\nNontheless, I learned a good deal and eventually ended up with a\nuseful tool that I used right away to solve a real problem. I was\npretty happy with it, despite its many wrinkles.</p>\n\n<p>Now, working my way through\n<a href=\"https://beautifulracket.com/\">Beautiful Racket</a> I saw\nhow thinking about this same exact problem in terms of a\nDomain-Specific Language can greatly simplify it.\nThe basic idea is that instead of writing a program to take the text\nas input, interpret commands, and produce a new file as output, we can\nsimplify the problem by thinking of the text itself as a program to be\nevaluated.\nThe plain text can be thought of as commands to insert themselves into\nthe output, and the embedded code as commands to insert other things.\nNaturally, I immediately reworked the preprocessor to use this\napproach and after a little bit of fiddling got\n<a href=\"https://github.com/LLazarek/ptext\">ptext</a>.\nThis approach let me build (almost) the same tool in a fraction of the\ncode, and without most of the knots in the previous design.</p>\n\n<p>It works by using a parser generator to generate a parser that\ndistinguishes racket expressions from regular text (using some\ndelimiters), and then converts each of those categories into\nexpressions to be evaluated and printed by racket.\nThe normal text just ends up becoming strings and the expressions get\nwrapped in a print, so when racket runs the resulting program the\noriginal text is printed and the expressions are evaluated and then\nprinted.\nIt&rsquo;s beautifully simple.</p>\n\n<p>I won&rsquo;t go into further detail but do check out\n<a href=\"https://beautifulracket.com/\">Beautiful Racket</a> if you\nare interested.\nIt&rsquo;s really fantastic.\nThis exercise in applying language-oriented programming to one of my\nown tools has served to clearly show me how this approach can be\nuseful.\nI&rsquo;m excited to see where else I might be able to use these ideas.</p>")) ((p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-10-14-org-images.md" . unix) f post (u . "Images in org-mode") (? . 3) 1539535322 (p+ #"/home/lukas/github_sync/projects/website/2018/10/images-in-org-mode.html" . unix) (u . "/2018/10/images-in-org-mode.html") (u . "2018-10-14T11:39:49") (? . 11) (? . 0) (c (u . "emacs") c (u . "org")) (u . "\n<p>Org-mode prides itself on being purely plain text. That doesn&rsquo;t mean that it can&rsquo;t do images, though!</p>") #t (u . "\n<p>Org-mode prides itself on being purely plain text. That doesn&rsquo;t mean that it can&rsquo;t do images, though!</p>\n<!-- more-->\n\n<p>In fact, org-mode has built-in support for including images in its documents. Not only can those images be inserted into exported formats like HTML and LaTeX, they can be displayed inline in emacs.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"displaying-images\">Displaying images</h1>\n\n<p>Displaying inline images is as simple as inserting a link to an image without a description and executing <code>org-toggle-inline-images</code>. For example:</p>\n\n<pre><code>[[file:/path/to/an/image.png]]</code></pre>\n\n<p>and hitting the default binding for <code>org-toggle-inline-images</code>, <code>C-c C-x C-v</code> causes the link to be overlayed with the image it links to.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"image-size\">Image size</h1>\n\n<p>While this is great, when I started using this I quickly noticed that org doesn&rsquo;t like displaying large images inline. If the image takes up much or all of the vertical screen space, scrolling through the buffer with that image is a nightmare; this happens because inline images are overlayed over the link text in the buffer, meaning that the image is considered by emacs to be on a single line. Emacs&rsquo; minimum scrolling unit is a line, so either the whole line (image) is visible or not.</p>\n\n<p>While there are some workarounds like <a href=\"http://www.gnu.org/software/emacs/manual/html_node/elisp/Showing-Images.html\">inserting images &ldquo;sliced&rdquo;</a> into multiple smaller images that each fit on one line, or a <a href=\"https://emacs.stackexchange.com/questions/10354/smooth-mouse-scroll-for-inline-images\">relatively new pixel-based scrolling feature</a>, I have found that these each have their own issues. Instead, I find it easiest to just resize the image being linked so that it is a reasonable size and the above scrolling behavior isn&rsquo;t problematic.</p>\n\n<p>There are two ways to do this; the first is builtin but only works in recent versions of emacs/org-mode, and I have sometimes had issues with it in exports. Nonetheless, it is certainly the simplest for just viewing images within org. Just add an <code>ATTR_ORG</code> line before the image specifying a width for the inserted image (in pixels) before toggling inline images.</p>\n\n<pre><code>#+ATTR_ORG: :width 1200\n[[file:/path/to/an/image.png]]</code></pre>\n\n<p>The second way is to resize the image itself. This might seem like a hassle, which it can be, but it can be made pretty painless. It also integrates pretty well with the editing functions I describe below. To do this, I wrote a function that uses an external tool to resize the image under point, and binds this to a key of choice. The function can be found below, along with some other useful functions.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"incorporating-images-into-my-note-taking-workflow\">Incorporating images into my note-taking workflow</h1>\n\n<p>I often find org&rsquo;s ability to show inline images most useful when taking notes. It&rsquo;s said that a picture is worth a thousand words, and indeed I often find it easiest when taking notes to just take a quick screenshot of something rather than trying to describe it; or worse, making ascii-art to depict it &#8211; much as I love ascii art, it really isn&rsquo;t an efficient way to draw pictures (even with <a href=\"https://www.emacswiki.org/emacs/ArtistMode\">artist-mode</a>). Furthermore, a simple screenshot may not be enough: I typically want to annotate the image, such as to highlight some portions of it or write comments directly beside the item of interest.</p>\n\n<p>To these ends, I wrote a pair of functions that allow me to quickly take screenshots and edit images directly from emacs. This eliminates the cognitive burden of opening a separate screenshot or image editing program etc, as well as feeling very natural. I bind these functions to easily accessible keys, and now inserting and marking up images in my notes feels just as natural as entering text.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"the-code\">The code</h1>\n\n<p>These three functions implement the behavior of taking screenshots, editing images, and resizing them. They are intended to be invoked within org mode, with the point at the location at which to insert the image or over the image to edit.</p>\n\n<p>A few notes: - The screenshot function automatically creates a <code>resources</code> directory in same directory as current org file. - These functions really just delegate to external programs in a convenient way, so they depend upon these programs being installed to work. The specific programs are <code>import</code>, <code>mogrify</code>, and <code>gimp</code>. The first two are part of the <code>imagemagick</code> package on Ubuntu and the last to the <code>gimp</code> package.</p>\n\n<pre><code>(defvar ll/org/insert-screenshot/redisplay-images t\n  \"Redisplay images after inserting a screenshot with\n`ll/org/insert-screenshot'?\")\n\n(defun ll/org/insert-screenshot (&amp;optional arg)\n  \"Capture a screenshot and insert a link to it in the current\nbuffer. If `ll/org/insert-screenshot/redisplay-images' is non-nil,\nredisplay images in the current buffer.\n\nBy default saves images to ./resources/screen_%Y%m%d_%H%M%S.png,\ncreating the resources directory if necessary.\n\nWith a prefix arg (C-u) prompt for a filename instead of using the default.\n\nDepends upon `import` from ImageMagick.\"\n  (interactive)\n  (unless (or arg\n              (file-directory-p \"./resources\"))\n    (make-directory \"resources\"))\n  (let* ((default-dest\n           (format-time-string \"./resources/screen_%Y%m%d_%H%M%S.png\"))\n         (dest (if arg\n                   (helm-read-string \"Save to: \" default-dest)\n                 default-dest)))\n    (start-process \"import\" nil \"/usr/bin/import\" dest)\n    (read-char \"Taking screenshot... Press any key when done.\")\n    (org-insert-link t (concat \"file:\" dest) \"\")\n    (when ll/org/insert-screenshot/redisplay-images\n      (org-remove-inline-images)\n      (org-display-inline-images))))\n\n\n(defvar ll/org/edit-image/redisplay-images t\n  \"Redisplay images after editing an image with `ll/org/edit-image'?\")\n\n(defun ll/org/edit-image (&amp;optional arg)\n  \"Edit the image linked at point. If\n`ll/org/insert-screenshot/redisplay-images' is non-nil, redisplay\nimages in the current buffer.\"\n  (interactive)\n  (let ((img (ll/org/link-file-path-at-point)))\n    (start-process \"gimp\" nil \"/usr/bin/gimp\" img)\n    (read-char \"Editing image... Press any key when done.\")\n    (when ll/org/edit-image/redisplay-images\n      (org-remove-inline-images)\n      (org-display-inline-images))))\n\n(defun ll/org/resize-image-at-point (&amp;optional arg)\n  \"Resize the image linked at point. If\n`ll/org/insert-screenshot/redisplay-images' is non-nil, redisplay\nimages in the current buffer.\"\n  (interactive)\n  (let ((img (ll/org/link-file-path-at-point))\n        (percent (read-number \"Resize to what percentage of current size? \")))\n    (start-process \"mogrify\" nil \"/usr/bin/mogrify\"\n                   \"-resize\"\n                   (format \"%s%%\" percent)\n                   img)\n    (when ll/org/edit-image/redisplay-images\n      (org-remove-inline-images)\n      (org-display-inline-images))))</code></pre>")) ((p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-07-29-rt18-end.md" . unix) f post (u . "Road Trip 2018: End") (? . 6) 1532975585 (p+ #"/home/lukas/github_sync/projects/website/2018/07/road-trip-2018-end.html" . unix) (u . "/2018/07/road-trip-2018-end.html") (u . "2018-07-29T11:33:30") (? . 1) (? . 12) (c (u . "rt18") c (u . "travel")) (u . "\n<p>The end.</p>") #t (u . "\n<p>The end.</p>\n<!-- more-->\n\n<br />\n\n<br />\n\n<h1 id=\"we-crashed\">We crashed</h1>\n\n<p>On route 90 just outside of Cleveland, we lost control and went off the highway. Nobody was hurt luckily, but the RV is pretty much totaled. We&rsquo;re all going home.</p>")) ((p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-08-15-scripting-emacs.md" . unix) f post (u . "Scripting Emacs") (? . 7) 1534347476 (p+ #"/home/lukas/github_sync/projects/website/2018/08/scripting-emacs.html" . unix) (u . "/2018/08/scripting-emacs.html") (u . "2018-08-15T10:46:59") (? . 12) (? . 11) (c (u . "emacs")) (u . "\n<p>I recently realized how easy it is to make emacs automatically do even more repetitive things I used to do manually.</p>") #t (u . "\n<p>I recently realized how easy it is to make emacs automatically do even more repetitive things I used to do manually.</p>\n<!-- more-->\n\n<p>Emacs is great for easily automating repetitive tasks, from macros to the design that every manual action performed in emacs is available in elisp as a function. While I have been aware of this and leverage it regularly to automate tasks within emacs, I have never really thought about using emacs to do the kind of work I typically write a shell script to do. This is probably because I&rsquo;m usually always in emacs anyway, so my typical workflow for automating a task is to write a function to do it, and then bind that function to some key.</p>\n\n<p>Some scenarios lend themselves more to a shell script style of automation, however; yet, the task may still involve nontrivial text processing or emacs-specific things. In these cases, the workflow is really only slightly different. Again, I write a function to do it, test with that function, and once it is ready I place the body of the function in its own file and run it with</p>\n\n<pre><code>emacs -Q --load &lt;the-file.el&gt;</code></pre>\n\n<p>Note that this will open a new gui instance, which may be desirable &#8211; it means that the &ldquo;script&rdquo; behaves exactly as if the task was done manually. (The slowdown and popping up of windows can probably be mitigated by using <code>-nw</code>, but then some things that may only load when in X mode won&rsquo;t be available.) Emacs also provides a <code>--script</code> switch (use it instead of <code>--load</code>) which won&rsquo;t open the gui and does other nice things like exiting emacs automatically at the end, but it sometimes doesn&rsquo;t behave exactly the same way as when X is used. I suspect that certain libraries aren&rsquo;t loaded with that option (similar to <code>-nw</code> not loading X-related settings). This has tripped me up in the past when trying to automate exporting org files: the exported files are monochrome using <code>--script</code>, but colored using <code>--load</code>!</p>\n\n<br />\n\n<br />\n\n<h1 id=\"example-generating-agendas-for-others\">Example: generating agendas for others</h1>\n\n<p>One of the typical cases where I want to script emacs is exporting information from org mode for non-emacs users to consume. For example, <a href=\"https://orgmode.org/manual/Weekly_002fdaily-agenda.html\">the agenda</a> provides such a convenient and automatic way to organize and represent information that I use it any time I have a timeline of tasks to complete. This kind of situation often occurs in group contexts as well, but of course rarely does anyone else use emacs, never mind org mode. So I often find myself in a situation where I would like to build and export custom agenda views for non-emacs users to have. Additionally, as the project progresses I may want to add tasks or mark tasks completed, and re-generate agendas for the others to see the progress.</p>\n\n<p>Org mode makes it pretty easy to do this, so it&rsquo;s simple to write a quick script that will automatically generate the necessary agenda views. One of the ways that I like to do this, for example, is to tag every task with the person it is delegated to. Then, I can create custom agenda view todo lists for each person by just filtering the agenda based on their tag and then exporting the view. I also like to leverage the <code>CATEGORY</code> property to provide more context in the agenda view for where tasks belong.</p>\n\n<p>Below is an example script that exports agenda views to postscript files using the above strategy.</p>\n\n<pre><code>(setq org-agenda-exporter-settings\n      '((ps-left-header (list 'org-agenda-write-buffer-name))\n        (ps-right-header\n         (list \"/pagenumberstring load\"\n               (lambda () (format-time-string \"%d/%m/%Y\"))))\n        (ps-print-color-p t)\n        (ps-font-size '(14 . 11))       ; Lanscape . Portrait\n        (ps-top-margin 55)\n        (ps-left-margin 35)\n        (ps-right-margin 30)))\n(setq org-agenda-scheduled-leaders '(\"\" \"** LATE .%2dx: **\"))\n(setq org-agenda-span 'year)\n(setq org-agenda-show-all-dates nil)\n\n(find-file \"&lt;/path/to/the/source.org&gt;\")\n(org-agenda-file-to-front)\n(org-agenda-list)\n\n(defun export-view-for (tag)\n  (defun insert-tag ()\n    (insert (format \":\\\\(%s\\\\|all\\\\):\" tag))\n    (execute-kbd-macro (kbd \"RET\")))\n  (run-with-timer 0.1 nil #'insert-tag)\n  (call-interactively #'org-agenda-filter-by-regexp)\n  (org-agenda-write (format \"%s.ps\" tag))\n  (org-agenda-filter-remove-all))\n\n(export-view-for \"joe\")\n(export-view-for \"schmoe\")\n(export-view-for \"fred\")\n\n(save-buffers-kill-terminal)</code></pre>\n\n<p>This could also pretty easily be abstracted to take a configuration file with the path to source and names to export views for.</p>\n\n<p>An extra fun fact is that exporting the views after updating the org source can be made easy with a link in the source that runs the script.</p>\n\n<pre><code>[[elisp:(async-shell-command \"emacs -Q -l ./export-views.el\")][export agenda views]]</code></pre>")) ((p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-07-02-org-mode.md" . unix) f post (u . "Organization with Org Mode") (? . 10) 1532125165 (p+ #"/home/lukas/github_sync/projects/website/2018/07/organization-with-org-mode.html" . unix) (u . "/2018/07/organization-with-org-mode.html") (u . "2018-07-02T11:37:07") (? . 13) (? . 9) (c (u . "emacs") c (u . "org")) (u . "\n<p>I organize myself and my work using emacs&rsquo; org mode. It has served me extremely well over the past few years and has helped me better organize both my working and personal life. In this post, I describe how I use org mode for everything from long-term projects to appointments and ideas.</p>") #t (u . "\n<p>I organize myself and my work using emacs&rsquo; org mode. It has served me extremely well over the past few years and has helped me better organize both my working and personal life. In this post, I describe how I use org mode for everything from long-term projects to appointments and ideas.</p>\n<!-- more-->\n\n<br />\n\n<br />\n\n<h1 id=\"context\">Context</h1>\n\n<p>I used to use a paper calendar to keep track of tasks, deadlines, and events. I pretty quickly found it generally ineffective for all the obvious reasons - inability to search, clutter, poor handwriting&#8230;</p>\n\n<p>I then transitioned to Google calendar, using events for tasks and deadlines. I liked it because the month view gave a nice birds-eye view of my work, and I could color code things into categories. This also had its share of problems, though. The calendar frequently became cluttered and difficult to parse, especially when I had a large number of tasks. Wanting to avoid this clutter, I was unwilling to track personal tasks; which, upon reflection, was absurd: my organization system deterred me from being organized. Add in some other annoyances about the unsupported ways I wanted to use the calendar, and I wasn&rsquo;t terribly happy with it. Furthermore, I decided that it was perhaps not the best idea for Google to know and be in control of every significant detail of my life.</p>\n\n<p>So after some searching, I decided to try org mode as a flexible offline solution to organize myself. It had the extra benefit of keeping everything completely in plain text, eliminating any concern about lock-in and making it easy to compose with standard Unix tools.</p>\n\n<p>It has been a few years since then, and I have never really looked back; org is flexible and expressive enough to do everything I wanted and more. What I present below has undergone many iterations since I began using org. It incorporates influences from Bernt Hansen&rsquo;s excellent <a href=\"http://doc.norang.ca/org-mode.html\">&ldquo;Organize Your Life in Plaintext&rdquo; guide</a>, GTD, and other myriad sources. I consider the system something of a continually evolving experiment, and I often try new approaches or ideas in a constant drive to improve it. Nonetheless, it already far surpasses any other system I have used or heard of.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"basic-organization\">Basic Organization</h1>\n\n<h2 id=\"file-structure\">File structure</h2>\n\n<p>I keep all of my task and appointment information in a single file. Within that file, I use headings to group everything into major categories; for example, my top-level headings include (<code>school, grad school, work, personal, appointments</code>). Within each category I use subcategories of arbitrary depth as I see fit. For example, under <code>school</code> I used a second level heading for each course I was taking, and under <code>work</code> headings for each project I worked on. When it&rsquo;s not clear what the subcategories need to be upon making a new category, I won&rsquo;t have any until it becomes clear what they should be. I don&rsquo;t worry about this file being heavily nested or difficult to navigate, because I almost never look at it or navigate through it directly (more on that in Seeing what needs to be done: the agenda).</p>\n\n<h2 id=\"tasks\">Tasks</h2>\n\n<p>The headings create a tree structure, and the leaves of the tree are tasks. I denote any heading marked with a <code>TODO</code> keyword as a task; conceptually, a task represents something discrete that needs to be done. Examples include a paper or report, a chore, an email to respond to, an appointment to complete, a flight to catch&#8230; Anything I can mark as having been completed. Tasks have a brief, informative heading on what needs to be done - this is important because the heading is what I see when looking through my tasks. The task may also have some notes, extra details, or (typically) links in it&rsquo;s body.</p>\n\n<p>I use a number of different <a href=\"https://orgmode.org/worg/org-glossary.html#todo-keywords\">TODO keywords</a> in addition to the basic <code>TODO</code> and <code>DONE</code>. The full set of keywords I use is, in this order: <code>(TODO NEXT STARTED WAITING REVIEW SUBMIT | DONE DEFERRED CANCELLED)</code>. I use <code>TODO</code> generally to mark a task. <code>NEXT</code> indicates a task that I intend to work on next or today (it serves as a quick way to single out tasks). <code>STARTED</code> means that the task has been started and is in progress. <code>WAITING</code> marks tasks that are blocked and un-actionable pending something beyond my control - like getting an email response, or receiving information from someone else. <code>REVIEW</code> means that the task requires review before completing (or some similar other final actions), but is pretty much complete. <code>SUBMIT</code> is similar to <code>REVIEW</code>, but specifically marks tasks that are completely done but need to be submitted somewhere. <code>DONE</code> means that a task is completely done. <code>DEFERRED</code> marks tasks that I have decided not to do for the time being, though I may at a later time revive them. <code>CANCELLED</code> marks tasks that I have canceled outright. Note that the bar separating <code>DONE</code> <code>DEFERRED</code> and <code>CANCELLED</code> marks those states as all representing \"done\"ness, so that tasks with those keywords won&rsquo;t be considered when I am viewing tasks to do.</p>\n\n<p>Finally, a task always has a date attached: either a <code>SCHEDULED</code> or a <code>DEADLINE</code> date (there is one exception to this: chaining tasks). Having one of these two dates is critical, because they are central to my task management. The primary factor by which I sort and view my tasks is date, so a task without a date won&rsquo;t be seen, and since I very rarely manually traverse my main file, it will certainly be forgotten.</p>\n\n<p>The two types of dates have very different meanings, however. A <code>DEADLINE</code> date represents, intuitively, a hard deadline for a task. Failure to complete a task by its deadline is usually a big problem, so these dates have a heavy weight in my prioritization scheme. I usually give all important tasks a deadline to ensure I actually do them and have fair warning about them. A <code>SCHEDULED</code> date, on the other hand, has a less rigid meaning. Scheduling a task for a given day generally just means that I want to be reminded of the task on that day. Thus, I use scheduling for less important tasks that I want reminders for, but that needn&rsquo;t necessarily be done exactly then. For example, exercising, small chores, and soft-deadline tasks.</p>\n\n<p>Note that this approach to using scheduled dates is <strong>not</strong> what is described in the org manual or most org guides. I tried using scheduled dates in the manner they were intended, which is to mark the day I should <strong>start</strong> working on a task, but I found that this never really worked usefully because it&rsquo;s really hard to predict when I can start working on things. In particular, individual tasks almost always take more or less time than I expect, and there are often circumstances that make working on specific tasks more or less desirable at a given time (including my mood) but which are impossible to predict ahead of time. In short, I prefer to just be able to see the full set of what needs to get done and pick what to do when I&rsquo;m actually going to do it.</p>\n\n<h2 id=\"chaining-tasks\">Chaining tasks</h2>\n\n<p>The only case when I intentionally leave a task without a date is if I have a series of tasks that naturally form a chain. That is, I have a series of tasks A, B, and C that must be done in order. In that case, I number the tasks in the title to indicate that they are part of a chain, and then I only put a date on the foremost non-done task. For example, this is how a chain of three tasks would progress over time:</p>\n\n<pre><code>* Some project               --&gt;     * Some project               --&gt;     * Some project\n** TODO (1) Fix bug                  ** DONE (1) Fix bug                  ** DONE (1) Fix bug\nSCHEDULED: &lt;2018-07-09 Mon&gt;          ** TODO (2) Add new feature          ** DONE (2) Add new feature\n** TODO (2) Add new feature          SCHEDULED: &lt;2018-07-09 Mon&gt;          ** TODO (3) Update docs\n** TODO (3) Update docs              ** TODO (3) Update docs              SCHEDULED: &lt;2018-07-09 Mon&gt;</code></pre>\n\n<h2 id=\"capturing-new-tasks\">Capturing new tasks</h2>\n\n<p>I almost always add new tasks using <a href=\"https://orgmode.org/manual/Capture.html#Capture\">org-capture</a>. Rather than searching through my entire file for the place to put a new task, with capture I can quickly create a new task and then <a href=\"https://orgmode.org/manual/Refile-and-copy.html#Refile-and-copy\">refile it</a> into a good spot (using fuzzy search!) from anywhere in emacs.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Extended notes (for or about pretty much everything) <span class=\"underline\">do not go into my main file</span>. It is a place for tasks and tasks only. I keep all my notes in separate org files, and usually link to them from the relevant tasks. If they don&rsquo;t necessarily relate to any tasks - or any active tasks anyway - then I have them accessible through <a href=\"https://jblevins.org/projects/deft/\">deft</a> which is a fantastic package for searching plain text notes. Since org is just plain text, it all works perfectly!</p>\n\n<h2 id=\"cleaning-things-up-archiving\">Cleaning things up: archiving</h2>\n\n<p>Since I keep track of just about everything I do using tasks, my main org file gets very cluttered with completed tasks over time. This isn&rsquo;t necessarily problem, since I rarely look at it anyway, except that it slows down org and the agenda a bit. So around once a year I go through the file and clean out completed tasks. I do this using <a href=\"https://orgmode.org/manual/Archiving.html#Archiving\">org&rsquo;s built-in archiving mechanism</a>.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"non-structural-organization\">Non structural organization</h1>\n\n<p>There are two primary ways that I further organize information and tasks beyond the tree structure of headings.</p>\n\n<h2 id=\"tags\">Tags</h2>\n\n<p>I use tags to categorize and prioritize tasks. Specifically, tags are useful for narrowing my agenda view and for searching and grouping tasks in clock reports. The most obvious way I use tags is to group things, such as tagging all the tasks related to a course with a tag for the course. The second way I use them is to mark tasks with priority labels like high, low, etc. Actually, I experimented with multiple levels of priority for a while and found that just two levels works best for me. That is, I mark prioritized tasks with the tag <code>:goal:</code>, and all other tasks are not prioritized. That doesn&rsquo;t mean I can&rsquo;t or won&rsquo;t do other tasks, just that they won&rsquo;t be emphasized in the agenda.</p>\n\n<p>I use another dimension to prioritize tasks, inspired by something like the <a href=\"https://www.developgoodhabits.com/eisenhower-matrix/\">Eisenhower prioritization matrix</a>, where I tag tasks as either <code>:must:</code> or <code>:want:</code>, depending on if I must or simply want to do them. I find that this further helps me to quickly and easily decide which tasks to work on and in what order.</p>\n\n<h2 id=\"links\">Links</h2>\n\n<p>I think that <span class=\"underline\">links are one of org modes greatest strengths.</span> Org has a <a href=\"https://orgmode.org/manual/Hyperlinks.html\">particularly rich link system</a> that allows creating \"clickable” links to quickly access related information. Links can refer to files and websites, of course, as well as more interesting things like specific headings in the same or other files, or chunks of text in a file, and can even evaluate arbitrary expressions, making them effectively general purpose buttons. Their flexibility makes them extremely useful for easily accessing disparate information. Any tasks I create relating to some other information has links to the relevant files, emails, websites, programs (remember that links can execute code?). This minimizes the inertia time involved in getting oriented to a new task; no need to think about where to find the right files or what to look at, because it&rsquo;s all in the links!</p>\n\n<p>The degree to which links simplify my organization cannot be overstated. For example, links completely eliminate typical email clutter; any emails that store useful information or require attention simply get linked to in a task and are archived. Thus, I never (or extremely rarely) need to sift through pages of emails to find something relating to a task. By following this principle of linking relevant documents and information, it&rsquo;s always available at my fingertips.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"seeing-what-needs-to-be-done-the-agenda\">Seeing what needs to be done: the agenda</h1>\n\n<p><a href=\"https://orgmode.org/manual/Agenda-views.html#Agenda-views\">The agenda</a> is the tool for viewing tasks. Instead of looking at my org file (which I in some ways consider to be the &ldquo;source&rdquo; for generating the agenda), I exclusively look at the agenda to see what needs to be done. At it&rsquo;s most basic, the agenda shows the tasks with scheduled and deadline dates for each day in the current week, starting with today. It also shows &ldquo;warnings&rdquo; for upcoming deadlines and the number of days until they become due. Thus, from looking at my agenda for today it is clear from the upcoming deadlines which important tasks need to get done and how soon, and from the scheduled items I am reminded of less important tasks and information.</p>\n\n<p>The agenda also provides a better interface for manipulating tasks. Tasks&rsquo; <code>TODO</code> state can be changed, their scheduled and deadline dates shifted, tags updated, and priority updated. You can also quickly clock in to or out of tasks right in the agenda.</p>\n\n<p>Since the main job of the agenda is to help me quickly see the tasks that need to be done, <a href=\"https://orgmode.org/manual/Filtering_002flimiting-agenda-items.html#Filtering_002flimiting-agenda-items\">its filtering capabilities</a> can be useful for focusing on specific groups of tasks. The most common filter I use is tag filtering or, for something more complex, regexp filtering (usually again on tags, however).</p>\n\n<h2 id=\"emphasizing-prioritized-tasks\">Emphasizing prioritized tasks</h2>\n\n<p>Filtering often isn&rsquo;t the best solution, however; <em>emphasis</em> often works just as well or better, especially for general task selection. Filtering is not ideal because I usually want to be aware of the other tasks, even if I&rsquo;m not working on them right now. To de-emphasize unprioritized tasks instead of hiding them, I adapted a solution for color coding tagged agenda tasks to render all tasks missing the :goal: tag in a light gray font, leaving :goal: tagged tasks in full black. I have found this to be a perfect middle ground: my prioritized tasks clearly stand out from the rest, while still leaving the others visible and accessible.</p>\n\n<h2 id=\"starting-tasks-quickly\">Starting tasks quickly</h2>\n\n<p>The last important element of the agenda for my workflow is that using <code>org-open-at-point</code> (<a href=\"https://orgmode.org/manual/Handling-links.html\">manual</a>) the links in the body of a task can be opened directly from the agenda, making it that much easier to jump into a task. Thus, my usual workflow for starting a new task is to (from the agenda) clock into the task and then open whatever links it contains - because of this, <span class=\"underline\">nearly all of my tasks contain links to something</span>.</p>\n\n<h2 id=\"aside-improving-the-agenda-view\">Aside: improving the agenda view</h2>\n\n<p>For more about the agenda and optimizing its appearance to make surveying tasks quick and easy, check out <a href=\"http://llazarek.github.io/2018/07/improving-the-agenda.html\">my other post</a> on tweaking the agenda&rsquo;s display settings.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"evaluation-and-reflection\">Evaluation and reflection</h1>\n\n<h2 id=\"clocking-work\">Clocking work</h2>\n\n<p>As I have mentioned, I use <a href=\"https://orgmode.org/manual/Clocking-work-time.html#Clocking-work-time\">org&rsquo;s clocking facilities</a> to track how I spend my time working. I have found that, of nothing else, knowing that the clock is running helps to keep me focused on the task at hand. Additionally, knowing how long I actually spend working on things has helped put my work and habits into perspective.</p>\n\n<p>In conjunction with clocking, I have for some time used a <a href=\"https://en.wikipedia.org/wiki/Pomodoro_Technique\">pomodoro approach</a> to structuring my work. I find that it helps me stay focused and gives an even better sense of time wrt work when I can think of working time in terms of pomodoros. I usually use 50-minute pomodoros, but depending on the task and my mood I have used 30m and 90m as well. To do this with org, I have hooked a pomodoro timer into my clock-in function so that the timer starts automatically every time I clock into a task.</p>\n\n<h2 id=\"seeing-the-work-i-have-done\">Seeing the work I have done</h2>\n\n<p>The agenda provides an option to display the tasks clocked and completed today (called <a href=\"https://orgmode.org/manual/Agenda-commands.html\">logbook mode</a>) which I greatly appreciate. I find it motivating and pleasing to see the fruits of my labor recorded in the agenda.</p>\n\n<p>Finally, for more comprehensive, long-term review of the work I have done over some period of time I use <a href=\"https://orgmode.org/manual/The-clock-table.html#The-clock-table\">org&rsquo;s clock reports</a>. With a clock report org mode can generate a table summarizing all of the time clocked over any period of time. I use this to do a regular review of my work every few days. Again, I find it helps me to see what I have been working on and where my time has been spent, which ultimately helps me plan work more effectively in the future.</p>\n\n<br />\n\n<br />\n\n<h1 id=\"the-code\">The code</h1>\n\n<p>I have heavily customized my org configuration to support the workflow I have described. Below is all of the code that enables the above workflow, as well as a few other minor things I have not described but have also found useful.</p>\n\n<h2 id=\"todo-keywords\">Todo keywords</h2>\n\n<p>This sets the todo keyword sequence and their colors.</p>\n\n<pre><code>(setq org-todo-keywords\n      (quote ((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED(s)\" \"WAITING(w)\"\n                        \"REVIEW(r)\" \"SUBMIT(m)\"\n                        \"|\" \"DONE(d)\" \"DEFERRED(f)\" \"CANCELLED(c)\"))))\n(setq org-todo-keyword-faces\n      (quote ((\"TODO\"      :foreground \"red\"          :weight bold)\n              (\"NEXT\"      :foreground \"blue\"         :weight bold)\n              (\"STARTED\"   :foreground \"cyan\"         :weight bold)\n              (\"WAITING\"   :foreground \"gold\"         :weight bold)\n              (\"REVIEW\"    :foreground \"magenta\"      :weight bold)\n              (\"SUBMIT\"    :foreground \"sea green\"    :weight bold)\n              (\"DONE\"      :foreground \"forest green\" :weight bold)\n              (\"DEFERRED\"  :foreground \"dark red\"     :weight bold)\n              (\"CANCELLED\" :foreground \"dark red\"     :weight bold))))</code></pre>\n\n<h2 id=\"agenda\">Agenda</h2>\n\n<h3 id=\"basic-formatting\">Basic formatting</h3>\n\n<p>This modifies agenda formatting; refer to comments for specific changes.</p>\n\n<pre><code>;; Don't display holidays that I don't follow\n(customize-set-variable 'holiday-bahai-holidays nil)\n(customize-set-variable 'holiday-hebrew-holidays\n                        (quote ((holiday-hebrew-hanukkah)\n                                (if calendar-hebrew-all-holidays-flag\n                                    (append (holiday-hebrew-tisha-b-av)\n                                            (holiday-hebrew-misc))))))\n(customize-set-variable 'holiday-islamic-holidays nil)\n\n;; Modify the way that entries with time specifications are displayed\n(customize-set-variable 'org-agenda-use-time-grid t)\n(customize-set-variable 'org-agenda-time-grid\n                        (quote ((daily today require-timed)\n                                #(\"-----------------------------------\"\n                                  0 35 (org-heading t))\n                                (0 2400))))\n(customize-set-variable 'org-agenda-current-time-string\n                        #(\"now - - - - - - - - - - - - - - - -\"\n                          0 35 (org-heading t)))\n;; Modify the way that deadlines are displayed\n(customize-set-variable 'org-agenda-deadline-leaders\n                        '(\"Deadline:  \" \"----- In %3d d.: -----\"))\n;; And scheduled items\n(customize-set-variable 'org-agenda-scheduled-leaders\n                        '(\"&gt;&gt; Scheduled: &lt;&lt;\" \"** Sched.%2dx: **\"))\n\n;; Don't warn me of an upcoming deadline if I schedule the entry\n(customize-set-variable 'org-agenda-skip-deadline-prewarning-if-scheduled t)\n;; Don't show scheduled entries that have been completed\n(customize-set-variable 'org-agenda-skip-scheduled-if-done t)\n\n;; Don't start with context lines from entry body\n(customize-set-variable 'org-agenda-start-with-entry-text-mode nil)\n;; If context lines are enabled, show up to 4 lines\n(customize-set-variable 'org-agenda-entry-text-maxlines 4)\n\n;; Pull data for agenda from these files\n(customize-set-variable 'org-agenda-files\n                        '(\"~/notes/main.org\"))\n\n;; Don't slow down startup when generating the agenda\n(customize-set-variable 'org-agenda-inhibit-startup nil)\n\n;; Show 14 days per page in the agenda\n(customize-set-variable 'org-agenda-span 14)\n;; Show upcoming deadlines for the 4 weeks\n(customize-set-variable 'org-deadline-warning-days 28)\n;; Start the agenda on today\n(customize-set-variable 'org-agenda-start-on-weekday nil)\n\n;; Set default priority to C\n(customize-set-variable 'org-default-priority 67)\n;; Color-code priorities\n(customize-set-variable 'org-agenda-fontify-priorities t)\n(customize-set-variable 'org-priority-faces\n                        (quote ((65 :foreground \"magenta\" :weight bold)\n                                (66 :foreground \"green3\")\n                                (67 :foreground \"orange\"))))\n\n;; Increase line spacing and highlight current line\n(defun ll/org/agenda/appearance-hook ()\n  (setq line-spacing 4)\n  (hl-line-mode 1))\n(add-hook 'org-finalize-agenda-hook #'ll/org/agenda/appearance-hook)\n\n;; Log when tasks completed\n(customize-set-variable 'org-log-done t)\n;; Show clocked items for the day in the agenda\n(customize-set-variable 'org-agenda-start-with-log-mode t)</code></pre>\n\n<h3 id=\"emphasis-and-prioritization\">Emphasis and prioritization</h3>\n\n<p>This implements tag-based emphasis in the agenda.</p>\n\n<pre><code>;; Color code tags\n;; `focus-mode' is what I call the toggle switch for de-emphasizing tasks\n(setq ll/org/agenda/focus-mode t)\n(defun ll/org/agenda/focus-mode-hook ()\n  (save-excursion\n    (progn\n      (when ll/org/agenda/focus-mode\n        ;; De-emphasize all headings by making them lighter\n        (ll/org/agenda/color-headers-with \":\" \"dark gray\"))\n      ;; Re-emphasize priority headings by making them black\n      (ll/org/agenda/color-headers-with \":goal:\" \"black\"))))\n(add-hook 'org-finalize-agenda-hook #'ll/org/agenda/focus-mode-hook)\n\n(defun ll/org/agenda/toggle-focus-mode ()\n  \"Toggle greying out of non-goal lines in the agenda.\"\n  (interactive)\n  (setq ll/org/agenda/focus-mode (not ll/org/agenda/focus-mode)))\n\n(defun find-in-line (needle &amp;optional beginning count)\n  \"Find the position of the start of NEEDLE in the current line.\n  If BEGINNING is non-nil, find the beginning of NEEDLE in the current\n  line. If COUNT is non-nil, find the COUNT'th occurrence from the left.\"\n  (save-excursion\n    (beginning-of-line)\n    (let ((found (re-search-forward needle (point-at-eol) t count)))\n      (if beginning\n          (match-beginning 0)\n        found))))\n\n(setq ll/org/agenda-todo-words\n      '(\"TODO\" \"GOAL\" \"NEXT\" \"STARTED\" \"WAITING\" \"REVIEW\" \"SUBMIT\"\n        \"DONE\" \"DEFERRED\" \"CANCELLED\"))\n\n(defun ll/org/agenda/find-todo-word-end ()\n  (reduce (lambda (a b) (or a b))\n          (mapcar #'find-in-line ll/org/agenda-todo-words)))\n\n;; This comes from a stackoverflow question I forgot to record..\n(defun ll/org/agenda/color-headers-with (tag col)\n  \"Color agenda lines matching TAG with color COL.\"\n  (interactive)\n  (goto-char (point-min))\n  (while (re-search-forward tag nil t)\n    (unless (find-in-line \"\\\\[#[A-Z]\\\\]\")\n      (let ((todo-end (or (ll/org/agenda/find-todo-word-end)\n                          (point-at-bol)))\n            (tags-beginning (or (find-in-line \" :\" t)\n                                (point-at-eol))))\n        (add-text-properties todo-end\n                             tags-beginning\n                             `(face (:foreground ,col)))))))</code></pre>\n\n<h2 id=\"refiling\">Refiling</h2>\n\n<p>This configures refiling with <code>org-refile</code>.</p>\n\n<pre><code>;; Refile to current file, main file, or \"someday\" file\n;; (in that order of precedence)\n(setq org-refile-targets '((nil :maxlevel . 2) ; current file\n                           (org-agenda-files :maxlevel . 5)\n                           (\"oneday-someday.org\" :maxlevel . 2)))\n;; Narrow refile targets by heading &gt; subheading\n(setq org-outline-path-complete-in-steps nil)\n;; Show full heading paths for refiling\n(setq org-refile-use-outline-path t)</code></pre>\n\n<h2 id=\"capture\">Capture</h2>\n\n<p>This configured capturing tasks with <code>org-capture</code>.</p>\n\n<pre><code>(global-set-key (kbd \"C-c j\") 'org-capture)\n(customize-set-variable 'org-capture-templates (quote (\n    (\"t\" \"Insert a new TODO\" entry\n     (file+headline \"~/github_sync/Notes/Main.org\" \"Refile\")\n     \"** TODO %?\n\")\n    (\"n\" \"Insert a new NEXT\" entry\n     (file+headline \"~/github_sync/Notes/Main.org\" \"Refile\")\n     \"** NEXT %?\n\"))))</code></pre>\n\n<h2 id=\"clocking\">Clocking</h2>\n\n<p>This configured clocking and pomodoro timers.</p>\n\n<pre><code>(customize-set-variable 'org-clock-into-drawer \"LOGBOOK\")\n(customize-set-variable 'org-time-clocksum-format (quote (:hours \"%d\"\n                                                          :require-hours t\n                                                          :minutes \":%02d\"\n                                                          :require-minutes t)))\n(setq org-time-clocksum-use-fractional t)\n\n;; Clocktable spacing appearance\n(defun ll/org/clocktable-indent-string (level)\n  (if (= level 1)\n      \"\"\n    (let ((str \"└\"))\n      (while (&gt; level 2)\n        (setq level (1- level)\n              str (concat str \"──\")))\n      (concat str \"─&gt; \"))))\n\n(advice-add 'org-clocktable-indent-string\n            :override #'ll/org/clocktable-indent-string)\n\n;; Pomodoro timer upon clocking in\n(customize-set-variable 'org-clock-sound\n                        \"/home/lukas/github_sync/notification.wav\")\n;; Default timer length\n(customize-set-variable 'org-timer-default-timer 50) ; minutes\n(add-hook 'org-clock-in-hook (lambda ()\n                               ;; '(4) means just use default duration\n                               (org-timer-set-timer '(4))))</code></pre>\n\n<h2 id=\"archiving\">Archiving</h2>\n\n<p>This configures where archive files are kept/named.</p>\n\n<pre><code>(customize-set-variable 'org-archive-location \"archive_%s::\")</code></pre>\n\n<h2 id=\"tags\">Tags</h2>\n\n<p>This helper function makes it easier to set the tags of the current heading.</p>\n\n<pre><code>(defun ll/org/set-tags ()\n  \"Set the tags of the current heading, like\n`org-agenda-set-tags' for outside the agenda.\"\n  (interactive)\n  (save-excursion\n    (end-of-line) ;; Prevent getting prev heading if at start of curr heading\n    (let* ((org-context (org-element-type (org-element-context)))\n           (on-heading (equal org-context 'heading)))\n      (unless on-heading\n        (outline-previous-heading))\n      (call-interactively 'org-set-tags))))</code></pre>\n\n<h2 id=\"appearance\">Appearance</h2>\n\n<p>These settings modify the appearance of org files.</p>\n\n<pre><code>;; Indent headings by level\n(customize-set-variable 'org-startup-indented t)\n;; Don't turn on truncating long lines in org mode\n(customize-set-variable 'org-startup-truncated nil)</code></pre>"))))