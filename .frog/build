((3) 0 () 0 () () (h ! (equal) ((p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-05-22-ptext.scrbl" . unix) f post (u . "Language-oriented Programming: ptext") (p+ #"/home/lukas/github_sync/projects/website/_src/posts/2018-05-22-ptext.scrbl" . unix) 1528409206 (p+ #"/home/lukas/github_sync/projects/website/2018/05/language-oriented-programming-ptext.html" . unix) (u . "/2018/05/language-oriented-programming-ptext.html") (u . "2018-05-22T19:06:27") #f #f (c (u . "PL") c (u . "racket")) (u . "\n<p>Language-oriented programming in action with racket.</p>") #t (u . "\n<p>Language-oriented programming in action with racket.</p>\n<!--more-->\n\n<blockquote class=\"refpara\">\n <blockquote class=\"refcolumn\">\n  <blockquote class=\"refcontent\">\n   <p><span style=\"font-weight: bold\">Note</span>\nI recently learned about <a href=\"https://docs.racket-lang.org/scribble/index.html\">scribble</a>, and specifically <a href=\"https://docs.racket-lang.org/scribble-pp/index.html\">how scribble as a text preprocessor</a>.\nIt is far superior to ptext in terms of being actually useful.</p></blockquote></blockquote></blockquote>\n\n<p>A year or two ago, I wrote a text preprocessor to allow embedded text\ngeneration using <a href=\"https://racket-lang.org/\">racket</a>.\nThe idea was to be able to embed racket expressions inside a text file\nto manipulate its contents and generate a new file.\nAt its simplest, the tool would just extract the the racket\nexpressions, evaluate them, and insert the results back into the file.\nI came up with the idea because I had a problem with\n<a href=\"https://www.ledger-cli.org/\">ledger</a> that such a tool would\nneatly solve, while possibly being useful for many other similar\nthings.</p>\n\n<p>I used racket mostly because I had just started learning it, and I\ndidn&rsquo;t really leverage any of its most interesting features.\nIn fact, I spent most of my time figuring out how to circumvent some\nof racket&rsquo;s design decisions (like the module system and constrained\n<span class=\"RktSym\">eval</span><span class=\"RktMeta\"></span>).\nI ended up with a few hundred lines of complicated code to do\nsomething that, at least conceptually, is pretty simple.\nNontheless, I learned a good deal and eventually ended up with a\nuseful tool that I used right away to solve a real problem. I was\npretty happy with it, despite its many wrinkles.</p>\n\n<p>Now, working my way through\n<a href=\"https://beautifulracket.com/\">Beautiful Racket</a> I saw\nhow thinking about this same exact problem in terms of a\nDomain-Specific Language can greatly simplify it.\nThe basic idea is that instead of writing a program to take the text\nas input, interpret commands, and produce a new file as output, we can\nsimplify the problem by thinking of the text itself as a program to be\nevaluated.\nThe plain text can be thought of as commands to insert themselves into\nthe output, and the embedded code as commands to insert other things.\nNaturally, I immediately reworked the preprocessor to use this\napproach and after a little bit of fiddling got\n<a href=\"https://github.com/LLazarek/ptext\">ptext</a>.\nThis approach let me build (almost) the same tool in a fraction of the\ncode, and without most of the knots in the previous design.</p>\n\n<p>It works by using a parser generator to generate a parser that\ndistinguishes racket expressions from regular text (using some\ndelimiters), and then converts each of those categories into\nexpressions to be evaluated and printed by racket.\nThe normal text just ends up becoming strings and the expressions get\nwrapped in a print, so when racket runs the resulting program the\noriginal text is printed and the expressions are evaluated and then\nprinted.\nIt&rsquo;s beautifully simple.</p>\n\n<p>I won&rsquo;t go into further detail but do check out\n<a href=\"https://beautifulracket.com/\">Beautiful Racket</a> if you\nare interested.\nIt&rsquo;s really fantastic.\nThis exercise in applying language-oriented programming to one of my\nown tools has served to clearly show me how this approach can be\nuseful.\nI&rsquo;m excited to see where else I might be able to use these ideas.</p>"))))